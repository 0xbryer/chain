// Code generated by MockGen. DO NOT EDIT.
// Source: x/tss/types/expected_keepers.go
//
// Generated by this command:
//
//	mockgen -source=x/tss/types/expected_keepers.go -package testutil -destination x/tss/testutil/expected_keepers_mocks.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"
	time "time"

	types "github.com/cosmos/cosmos-sdk/types"
	authz "github.com/cosmos/cosmos-sdk/x/authz"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthzKeeper is a mock of AuthzKeeper interface.
type MockAuthzKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAuthzKeeperMockRecorder
	isgomock struct{}
}

// MockAuthzKeeperMockRecorder is the mock recorder for MockAuthzKeeper.
type MockAuthzKeeperMockRecorder struct {
	mock *MockAuthzKeeper
}

// NewMockAuthzKeeper creates a new mock instance.
func NewMockAuthzKeeper(ctrl *gomock.Controller) *MockAuthzKeeper {
	mock := &MockAuthzKeeper{ctrl: ctrl}
	mock.recorder = &MockAuthzKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthzKeeper) EXPECT() *MockAuthzKeeperMockRecorder {
	return m.recorder
}

// GetAuthorization mocks base method.
func (m *MockAuthzKeeper) GetAuthorization(ctx context.Context, grantee, granter types.AccAddress, msgType string) (authz.Authorization, *time.Time) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorization", ctx, grantee, granter, msgType)
	ret0, _ := ret[0].(authz.Authorization)
	ret1, _ := ret[1].(*time.Time)
	return ret0, ret1
}

// GetAuthorization indicates an expected call of GetAuthorization.
func (mr *MockAuthzKeeperMockRecorder) GetAuthorization(ctx, grantee, granter, msgType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorization", reflect.TypeOf((*MockAuthzKeeper)(nil).GetAuthorization), ctx, grantee, granter, msgType)
}

// SaveGrant mocks base method.
func (m *MockAuthzKeeper) SaveGrant(ctx context.Context, grantee, granter types.AccAddress, authorization authz.Authorization, expiration *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGrant", ctx, grantee, granter, authorization, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveGrant indicates an expected call of SaveGrant.
func (mr *MockAuthzKeeperMockRecorder) SaveGrant(ctx, grantee, granter, authorization, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGrant", reflect.TypeOf((*MockAuthzKeeper)(nil).SaveGrant), ctx, grantee, granter, authorization, expiration)
}

// MockRollingseedKeeper is a mock of RollingseedKeeper interface.
type MockRollingseedKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockRollingseedKeeperMockRecorder
	isgomock struct{}
}

// MockRollingseedKeeperMockRecorder is the mock recorder for MockRollingseedKeeper.
type MockRollingseedKeeperMockRecorder struct {
	mock *MockRollingseedKeeper
}

// NewMockRollingseedKeeper creates a new mock instance.
func NewMockRollingseedKeeper(ctrl *gomock.Controller) *MockRollingseedKeeper {
	mock := &MockRollingseedKeeper{ctrl: ctrl}
	mock.recorder = &MockRollingseedKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRollingseedKeeper) EXPECT() *MockRollingseedKeeperMockRecorder {
	return m.recorder
}

// GetRollingSeed mocks base method.
func (m *MockRollingseedKeeper) GetRollingSeed(ctx types.Context) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRollingSeed", ctx)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetRollingSeed indicates an expected call of GetRollingSeed.
func (mr *MockRollingseedKeeperMockRecorder) GetRollingSeed(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRollingSeed", reflect.TypeOf((*MockRollingseedKeeper)(nil).GetRollingSeed), ctx)
}
