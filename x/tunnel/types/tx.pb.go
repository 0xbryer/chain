// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: band/tunnel/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateTunnel is the transaction message to create a new tunnel.
type MsgCreateTunnel struct {
	// signal_deviations is the list of signal deviations.
	SignalDeviations []SignalDeviation `protobuf:"bytes,1,rep,name=signal_deviations,json=signalDeviations,proto3" json:"signal_deviations"`
	// interval is the interval for delivering the signal prices in seconds.
	Interval uint64 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// route is the route for delivering the signal prices
	Route *types.Any `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	// initial_deposit is the deposit value that must be paid at tunnel creation.
	InitialDeposit github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=initial_deposit,json=initialDeposit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"initial_deposit"`
	// creator is the address of the creator.
	Creator string `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgCreateTunnel) Reset()         { *m = MsgCreateTunnel{} }
func (m *MsgCreateTunnel) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTunnel) ProtoMessage()    {}
func (*MsgCreateTunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{0}
}
func (m *MsgCreateTunnel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTunnel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTunnel.Merge(m, src)
}
func (m *MsgCreateTunnel) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTunnel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTunnel proto.InternalMessageInfo

func (m *MsgCreateTunnel) GetSignalDeviations() []SignalDeviation {
	if m != nil {
		return m.SignalDeviations
	}
	return nil
}

func (m *MsgCreateTunnel) GetInterval() uint64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *MsgCreateTunnel) GetRoute() *types.Any {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *MsgCreateTunnel) GetInitialDeposit() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.InitialDeposit
	}
	return nil
}

func (m *MsgCreateTunnel) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// MsgCreateTunnelResponse is the response type for the Msg/CreateTunnel RPC method.
type MsgCreateTunnelResponse struct {
	TunnelID uint64 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
}

func (m *MsgCreateTunnelResponse) Reset()         { *m = MsgCreateTunnelResponse{} }
func (m *MsgCreateTunnelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTunnelResponse) ProtoMessage()    {}
func (*MsgCreateTunnelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{1}
}
func (m *MsgCreateTunnelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTunnelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTunnelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTunnelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTunnelResponse.Merge(m, src)
}
func (m *MsgCreateTunnelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTunnelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTunnelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTunnelResponse proto.InternalMessageInfo

func (m *MsgCreateTunnelResponse) GetTunnelID() uint64 {
	if m != nil {
		return m.TunnelID
	}
	return 0
}

// MsgUpdateRoute is the transaction message to update a route information of the tunnel.
type MsgUpdateRoute struct {
	// tunnel_id is the ID of the tunnel to edit.
	TunnelID uint64 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// route is the route for delivering the signal prices
	Route *types.Any `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	// creator is the address of the creator.
	Creator string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgUpdateRoute) Reset()         { *m = MsgUpdateRoute{} }
func (m *MsgUpdateRoute) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRoute) ProtoMessage()    {}
func (*MsgUpdateRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{2}
}
func (m *MsgUpdateRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRoute.Merge(m, src)
}
func (m *MsgUpdateRoute) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRoute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRoute proto.InternalMessageInfo

func (m *MsgUpdateRoute) GetTunnelID() uint64 {
	if m != nil {
		return m.TunnelID
	}
	return 0
}

func (m *MsgUpdateRoute) GetRoute() *types.Any {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *MsgUpdateRoute) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// MsgUpdateRouteResponse is the response type for the Msg/UpdateRoute RPC method.
type MsgUpdateRouteResponse struct {
}

func (m *MsgUpdateRouteResponse) Reset()         { *m = MsgUpdateRouteResponse{} }
func (m *MsgUpdateRouteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRouteResponse) ProtoMessage()    {}
func (*MsgUpdateRouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{3}
}
func (m *MsgUpdateRouteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRouteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRouteResponse.Merge(m, src)
}
func (m *MsgUpdateRouteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRouteResponse proto.InternalMessageInfo

// MsgUpdateSignalsAndInterval is the transaction message to update signals and interval of the tunnel.
type MsgUpdateSignalsAndInterval struct {
	// tunnel_id is the ID of the tunnel to edit.
	TunnelID uint64 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// signal_deviations is the list of signal deviations.
	SignalDeviations []SignalDeviation `protobuf:"bytes,2,rep,name=signal_deviations,json=signalDeviations,proto3" json:"signal_deviations"`
	// interval is the interval for delivering the signal prices.
	Interval uint64 `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
	// creator is the address of the creator.
	Creator string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgUpdateSignalsAndInterval) Reset()         { *m = MsgUpdateSignalsAndInterval{} }
func (m *MsgUpdateSignalsAndInterval) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSignalsAndInterval) ProtoMessage()    {}
func (*MsgUpdateSignalsAndInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{4}
}
func (m *MsgUpdateSignalsAndInterval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSignalsAndInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSignalsAndInterval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSignalsAndInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSignalsAndInterval.Merge(m, src)
}
func (m *MsgUpdateSignalsAndInterval) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSignalsAndInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSignalsAndInterval.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSignalsAndInterval proto.InternalMessageInfo

func (m *MsgUpdateSignalsAndInterval) GetTunnelID() uint64 {
	if m != nil {
		return m.TunnelID
	}
	return 0
}

func (m *MsgUpdateSignalsAndInterval) GetSignalDeviations() []SignalDeviation {
	if m != nil {
		return m.SignalDeviations
	}
	return nil
}

func (m *MsgUpdateSignalsAndInterval) GetInterval() uint64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *MsgUpdateSignalsAndInterval) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// MsgUpdateSignalsAndIntervalResponse is the response type for the Msg/UpdateSignalsAndInterval RPC method.
type MsgUpdateSignalsAndIntervalResponse struct {
}

func (m *MsgUpdateSignalsAndIntervalResponse) Reset()         { *m = MsgUpdateSignalsAndIntervalResponse{} }
func (m *MsgUpdateSignalsAndIntervalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSignalsAndIntervalResponse) ProtoMessage()    {}
func (*MsgUpdateSignalsAndIntervalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{5}
}
func (m *MsgUpdateSignalsAndIntervalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSignalsAndIntervalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSignalsAndIntervalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSignalsAndIntervalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSignalsAndIntervalResponse.Merge(m, src)
}
func (m *MsgUpdateSignalsAndIntervalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSignalsAndIntervalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSignalsAndIntervalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSignalsAndIntervalResponse proto.InternalMessageInfo

// Activate is the transaction message to activate a tunnel.
type MsgActivate struct {
	// tunnel_id is the ID of the tunnel to activate.
	TunnelID uint64 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// creator is the address of the creator.
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgActivate) Reset()         { *m = MsgActivate{} }
func (m *MsgActivate) String() string { return proto.CompactTextString(m) }
func (*MsgActivate) ProtoMessage()    {}
func (*MsgActivate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{6}
}
func (m *MsgActivate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgActivate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgActivate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgActivate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActivate.Merge(m, src)
}
func (m *MsgActivate) XXX_Size() int {
	return m.Size()
}
func (m *MsgActivate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActivate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActivate proto.InternalMessageInfo

func (m *MsgActivate) GetTunnelID() uint64 {
	if m != nil {
		return m.TunnelID
	}
	return 0
}

func (m *MsgActivate) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// MsgActivateResponse is the response type for the Msg/Activate RPC method.
type MsgActivateResponse struct {
}

func (m *MsgActivateResponse) Reset()         { *m = MsgActivateResponse{} }
func (m *MsgActivateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgActivateResponse) ProtoMessage()    {}
func (*MsgActivateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{7}
}
func (m *MsgActivateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgActivateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgActivateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgActivateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActivateResponse.Merge(m, src)
}
func (m *MsgActivateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgActivateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActivateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActivateResponse proto.InternalMessageInfo

// MsgDeactivate is the transaction message to deactivate a tunnel.
type MsgDeactivate struct {
	// tunnel_id is the ID of the tunnel to deactivate.
	TunnelID uint64 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// creator is the address of the creator.
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgDeactivate) Reset()         { *m = MsgDeactivate{} }
func (m *MsgDeactivate) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivate) ProtoMessage()    {}
func (*MsgDeactivate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{8}
}
func (m *MsgDeactivate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivate.Merge(m, src)
}
func (m *MsgDeactivate) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivate proto.InternalMessageInfo

func (m *MsgDeactivate) GetTunnelID() uint64 {
	if m != nil {
		return m.TunnelID
	}
	return 0
}

func (m *MsgDeactivate) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// MsgDeactivateTunnelResponse is the response type for the Msg/Deactivate RPC method.
type MsgDeactivateResponse struct {
}

func (m *MsgDeactivateResponse) Reset()         { *m = MsgDeactivateResponse{} }
func (m *MsgDeactivateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateResponse) ProtoMessage()    {}
func (*MsgDeactivateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{9}
}
func (m *MsgDeactivateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateResponse.Merge(m, src)
}
func (m *MsgDeactivateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateResponse proto.InternalMessageInfo

// MsgTriggerTunnel is the transaction message to manually trigger a tunnel.
type MsgTriggerTunnel struct {
	// tunnel_id is the ID of the tunnel to manually trigger.
	TunnelID uint64 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// creator is the address of the creator.
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgTriggerTunnel) Reset()         { *m = MsgTriggerTunnel{} }
func (m *MsgTriggerTunnel) String() string { return proto.CompactTextString(m) }
func (*MsgTriggerTunnel) ProtoMessage()    {}
func (*MsgTriggerTunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{10}
}
func (m *MsgTriggerTunnel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTriggerTunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTriggerTunnel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTriggerTunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTriggerTunnel.Merge(m, src)
}
func (m *MsgTriggerTunnel) XXX_Size() int {
	return m.Size()
}
func (m *MsgTriggerTunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTriggerTunnel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTriggerTunnel proto.InternalMessageInfo

func (m *MsgTriggerTunnel) GetTunnelID() uint64 {
	if m != nil {
		return m.TunnelID
	}
	return 0
}

func (m *MsgTriggerTunnel) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// MsgTriggerTunnelResponse is the response type for the Msg/TriggerTunnel RPC method.
type MsgTriggerTunnelResponse struct {
}

func (m *MsgTriggerTunnelResponse) Reset()         { *m = MsgTriggerTunnelResponse{} }
func (m *MsgTriggerTunnelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTriggerTunnelResponse) ProtoMessage()    {}
func (*MsgTriggerTunnelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{11}
}
func (m *MsgTriggerTunnelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTriggerTunnelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTriggerTunnelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTriggerTunnelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTriggerTunnelResponse.Merge(m, src)
}
func (m *MsgTriggerTunnelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTriggerTunnelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTriggerTunnelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTriggerTunnelResponse proto.InternalMessageInfo

// MsgDepositToTunnel defines a message to deposit to an existing tunnel.
type MsgDepositToTunnel struct {
	// tunnel_id defines the unique id of the tunnel.
	TunnelID uint64 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// amount to be deposited by depositor.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	// depositor defines the deposit addresses from the tunnel.
	Depositor string `protobuf:"bytes,3,opt,name=depositor,proto3" json:"depositor,omitempty"`
}

func (m *MsgDepositToTunnel) Reset()         { *m = MsgDepositToTunnel{} }
func (m *MsgDepositToTunnel) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToTunnel) ProtoMessage()    {}
func (*MsgDepositToTunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{12}
}
func (m *MsgDepositToTunnel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToTunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToTunnel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToTunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToTunnel.Merge(m, src)
}
func (m *MsgDepositToTunnel) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToTunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToTunnel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToTunnel proto.InternalMessageInfo

func (m *MsgDepositToTunnel) GetTunnelID() uint64 {
	if m != nil {
		return m.TunnelID
	}
	return 0
}

func (m *MsgDepositToTunnel) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgDepositToTunnel) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

// MsgDepositToTunnelResponse defines the Msg/DepositToTunnel response type.
type MsgDepositToTunnelResponse struct {
}

func (m *MsgDepositToTunnelResponse) Reset()         { *m = MsgDepositToTunnelResponse{} }
func (m *MsgDepositToTunnelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositToTunnelResponse) ProtoMessage()    {}
func (*MsgDepositToTunnelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{13}
}
func (m *MsgDepositToTunnelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositToTunnelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositToTunnelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositToTunnelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositToTunnelResponse.Merge(m, src)
}
func (m *MsgDepositToTunnelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositToTunnelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositToTunnelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositToTunnelResponse proto.InternalMessageInfo

// MsgWithdrawFromTunnel is the transaction message to withdraw a deposit from an existing tunnel.
type MsgWithdrawFromTunnel struct {
	// tunnel_id defines the unique id of the tunnel.
	TunnelID uint64 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// amount to be withdrawn by withdrawer.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	// withdrawer defines the withdraw addresses from the tunnel.
	Withdrawer string `protobuf:"bytes,3,opt,name=withdrawer,proto3" json:"withdrawer,omitempty"`
}

func (m *MsgWithdrawFromTunnel) Reset()         { *m = MsgWithdrawFromTunnel{} }
func (m *MsgWithdrawFromTunnel) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFromTunnel) ProtoMessage()    {}
func (*MsgWithdrawFromTunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{14}
}
func (m *MsgWithdrawFromTunnel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFromTunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFromTunnel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFromTunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFromTunnel.Merge(m, src)
}
func (m *MsgWithdrawFromTunnel) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFromTunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFromTunnel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFromTunnel proto.InternalMessageInfo

func (m *MsgWithdrawFromTunnel) GetTunnelID() uint64 {
	if m != nil {
		return m.TunnelID
	}
	return 0
}

func (m *MsgWithdrawFromTunnel) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgWithdrawFromTunnel) GetWithdrawer() string {
	if m != nil {
		return m.Withdrawer
	}
	return ""
}

// MsgWithdrawFromTunnelResponse defines the Msg/WithdrawFromTunnel response type.
type MsgWithdrawFromTunnelResponse struct {
}

func (m *MsgWithdrawFromTunnelResponse) Reset()         { *m = MsgWithdrawFromTunnelResponse{} }
func (m *MsgWithdrawFromTunnelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFromTunnelResponse) ProtoMessage()    {}
func (*MsgWithdrawFromTunnelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{15}
}
func (m *MsgWithdrawFromTunnelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFromTunnelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFromTunnelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFromTunnelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFromTunnelResponse.Merge(m, src)
}
func (m *MsgWithdrawFromTunnelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFromTunnelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFromTunnelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFromTunnelResponse proto.InternalMessageInfo

// MsgUpdateParams is the transaction message to update parameters.
type MsgUpdateParams struct {
	// authority is the address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params is the x/tunnel parameters to update.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{16}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse is the response type for the Msg/UpdateParams RPC method.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18351d83b4705d0, []int{17}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateTunnel)(nil), "band.tunnel.v1beta1.MsgCreateTunnel")
	proto.RegisterType((*MsgCreateTunnelResponse)(nil), "band.tunnel.v1beta1.MsgCreateTunnelResponse")
	proto.RegisterType((*MsgUpdateRoute)(nil), "band.tunnel.v1beta1.MsgUpdateRoute")
	proto.RegisterType((*MsgUpdateRouteResponse)(nil), "band.tunnel.v1beta1.MsgUpdateRouteResponse")
	proto.RegisterType((*MsgUpdateSignalsAndInterval)(nil), "band.tunnel.v1beta1.MsgUpdateSignalsAndInterval")
	proto.RegisterType((*MsgUpdateSignalsAndIntervalResponse)(nil), "band.tunnel.v1beta1.MsgUpdateSignalsAndIntervalResponse")
	proto.RegisterType((*MsgActivate)(nil), "band.tunnel.v1beta1.MsgActivate")
	proto.RegisterType((*MsgActivateResponse)(nil), "band.tunnel.v1beta1.MsgActivateResponse")
	proto.RegisterType((*MsgDeactivate)(nil), "band.tunnel.v1beta1.MsgDeactivate")
	proto.RegisterType((*MsgDeactivateResponse)(nil), "band.tunnel.v1beta1.MsgDeactivateResponse")
	proto.RegisterType((*MsgTriggerTunnel)(nil), "band.tunnel.v1beta1.MsgTriggerTunnel")
	proto.RegisterType((*MsgTriggerTunnelResponse)(nil), "band.tunnel.v1beta1.MsgTriggerTunnelResponse")
	proto.RegisterType((*MsgDepositToTunnel)(nil), "band.tunnel.v1beta1.MsgDepositToTunnel")
	proto.RegisterType((*MsgDepositToTunnelResponse)(nil), "band.tunnel.v1beta1.MsgDepositToTunnelResponse")
	proto.RegisterType((*MsgWithdrawFromTunnel)(nil), "band.tunnel.v1beta1.MsgWithdrawFromTunnel")
	proto.RegisterType((*MsgWithdrawFromTunnelResponse)(nil), "band.tunnel.v1beta1.MsgWithdrawFromTunnelResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "band.tunnel.v1beta1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "band.tunnel.v1beta1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("band/tunnel/v1beta1/tx.proto", fileDescriptor_d18351d83b4705d0) }

var fileDescriptor_d18351d83b4705d0 = []byte{
	// 1058 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xda, 0x69, 0x9a, 0xbc, 0xa4, 0x4d, 0xbb, 0x4d, 0x9a, 0xcd, 0x36, 0x38, 0xd6, 0xa6,
	0xa1, 0x6e, 0x68, 0x76, 0x1b, 0x47, 0x54, 0x25, 0xb7, 0xb8, 0x16, 0x92, 0x0f, 0x96, 0x90, 0x1b,
	0xa8, 0x84, 0x90, 0xa2, 0xb5, 0x77, 0x59, 0x8f, 0x6a, 0xef, 0x58, 0x3b, 0x63, 0xb7, 0xbe, 0x21,
	0x0e, 0x1c, 0xb8, 0x00, 0x07, 0x10, 0x12, 0x77, 0x84, 0xb8, 0x90, 0x43, 0xcf, 0x9c, 0x2b, 0x2e,
	0x54, 0x9c, 0x38, 0x15, 0x94, 0x1c, 0xf2, 0x6f, 0xa0, 0x9d, 0x9d, 0x9d, 0xfd, 0xe1, 0x1f, 0xb1,
	0xa5, 0x82, 0xb8, 0xc4, 0x3b, 0xef, 0x7d, 0x33, 0xef, 0x7b, 0xdf, 0xcc, 0xbc, 0x37, 0x81, 0x8d,
	0xba, 0xe9, 0x5a, 0x06, 0xed, 0xba, 0xae, 0xdd, 0x32, 0x7a, 0x7b, 0x75, 0x9b, 0x9a, 0x7b, 0x06,
	0x7d, 0xae, 0x77, 0x3c, 0x4c, 0xb1, 0x7c, 0xc3, 0xf7, 0xea, 0x81, 0x57, 0xe7, 0x5e, 0x75, 0xdd,
	0xc1, 0xd8, 0x69, 0xd9, 0x06, 0x83, 0xd4, 0xbb, 0x9f, 0x1a, 0xa6, 0xdb, 0x0f, 0xf0, 0xea, 0x8a,
	0x83, 0x1d, 0xcc, 0x3e, 0x0d, 0xff, 0x8b, 0x5b, 0xd7, 0x1b, 0x98, 0xb4, 0x31, 0x39, 0x0e, 0x1c,
	0xc1, 0x80, 0xbb, 0x72, 0xc1, 0xc8, 0xa8, 0x9b, 0xc4, 0x16, 0xe1, 0x1b, 0x18, 0xb9, 0xdc, 0xbf,
	0xc6, 0xfd, 0x6d, 0xe2, 0x18, 0xbd, 0x3d, 0xff, 0x87, 0x3b, 0xae, 0x9b, 0x6d, 0xe4, 0x62, 0x83,
	0xfd, 0xe5, 0xa6, 0xfc, 0xb0, 0x54, 0x3a, 0xa6, 0x67, 0xb6, 0xc9, 0x38, 0x04, 0xcf, 0x8e, 0x21,
	0xb4, 0xef, 0xb2, 0xb0, 0x5c, 0x25, 0xce, 0x23, 0xcf, 0x36, 0xa9, 0x7d, 0xc4, 0x3c, 0xf2, 0x13,
	0xb8, 0x4e, 0x90, 0xe3, 0x9a, 0xad, 0x63, 0xcb, 0xee, 0x21, 0x93, 0x22, 0xec, 0x12, 0x45, 0xca,
	0x67, 0x0b, 0x8b, 0xc5, 0xdb, 0xfa, 0x10, 0x81, 0xf4, 0xc7, 0x0c, 0x5d, 0x0e, 0xc1, 0xa5, 0xd9,
	0x97, 0xaf, 0x37, 0x67, 0x6a, 0xd7, 0x48, 0xd2, 0x4c, 0x64, 0x15, 0xe6, 0x91, 0x4b, 0x6d, 0xaf,
	0x67, 0xb6, 0x94, 0x4c, 0x5e, 0x2a, 0xcc, 0xd6, 0xc4, 0x58, 0x7e, 0x00, 0x97, 0x3c, 0xdc, 0xa5,
	0xb6, 0x92, 0xcd, 0x4b, 0x85, 0xc5, 0xe2, 0x8a, 0x1e, 0x88, 0xae, 0x87, 0xa2, 0xeb, 0x87, 0x6e,
	0xbf, 0x04, 0xbf, 0xbd, 0xd8, 0x9d, 0xab, 0xf9, 0xb0, 0x4a, 0x2d, 0x80, 0xcb, 0x7d, 0x58, 0x46,
	0x2e, 0xa2, 0x88, 0xb1, 0xed, 0x60, 0x82, 0xa8, 0x32, 0xcb, 0xa8, 0xae, 0xeb, 0x5c, 0x78, 0x5f,
	0x6a, 0x41, 0xf5, 0x11, 0x46, 0x6e, 0xe9, 0x5d, 0x9f, 0xdf, 0xcf, 0x7f, 0x6d, 0x16, 0x1c, 0x44,
	0x9b, 0xdd, 0xba, 0xde, 0xc0, 0x6d, 0xbe, 0x4b, 0xfc, 0x67, 0x97, 0x58, 0x4f, 0x0d, 0xda, 0xef,
	0xd8, 0x84, 0x4d, 0x20, 0x3f, 0x9d, 0x9f, 0xec, 0x48, 0xb5, 0xab, 0x3c, 0x50, 0x39, 0x88, 0x23,
	0x17, 0xe1, 0x72, 0xc3, 0xd7, 0x0d, 0x7b, 0xca, 0xa5, 0xbc, 0x54, 0x58, 0x28, 0x29, 0x7f, 0xbc,
	0xd8, 0x5d, 0xe1, 0x51, 0x0f, 0x2d, 0xcb, 0xb3, 0x09, 0x79, 0x4c, 0x3d, 0xe4, 0x3a, 0xb5, 0x10,
	0x78, 0x70, 0xe7, 0xf3, 0xf3, 0x93, 0x9d, 0x70, 0xf4, 0xe5, 0xf9, 0xc9, 0xce, 0x4d, 0xbe, 0x3b,
	0xa9, 0x4d, 0xd0, 0xca, 0xb0, 0x96, 0x32, 0xd5, 0x6c, 0xd2, 0xc1, 0x2e, 0xb1, 0xe5, 0xbb, 0xb0,
	0x10, 0x4c, 0x3a, 0x46, 0x96, 0x22, 0xf9, 0x3a, 0x96, 0x96, 0x4e, 0x5f, 0x6f, 0xce, 0x07, 0xb0,
	0x4a, 0xb9, 0x36, 0x1f, 0xb8, 0x2b, 0x96, 0xf6, 0xbb, 0x04, 0x57, 0xab, 0xc4, 0xf9, 0xb0, 0x63,
	0x99, 0xd4, 0x66, 0xc2, 0x4d, 0x31, 0x3b, 0xda, 0x93, 0xcc, 0x74, 0x7b, 0x12, 0x13, 0x26, 0x3b,
	0xa9, 0x30, 0x6f, 0xa7, 0x85, 0x59, 0x8d, 0x84, 0x89, 0xd1, 0xd7, 0x14, 0xb8, 0x99, 0xb4, 0x84,
	0xb2, 0x68, 0x3f, 0x66, 0xe0, 0x96, 0x70, 0x05, 0x47, 0x92, 0x1c, 0xba, 0x56, 0x25, 0x3c, 0x61,
	0x53, 0x24, 0x3e, 0xf4, 0x06, 0x64, 0xde, 0xf0, 0x0d, 0xc8, 0xa6, 0x6e, 0x40, 0x4c, 0xb5, 0xd9,
	0x49, 0x55, 0xdb, 0x4f, 0xab, 0xa6, 0xa5, 0x55, 0x1b, 0x14, 0x42, 0xdb, 0x86, 0xad, 0x31, 0x6e,
	0xa1, 0xe7, 0x37, 0x12, 0x2c, 0x56, 0x89, 0x73, 0xd8, 0xa0, 0xa8, 0x67, 0x4e, 0x77, 0x70, 0x62,
	0xa9, 0x64, 0x26, 0x4d, 0x65, 0x2b, 0x9d, 0x8a, 0x1c, 0xa5, 0x12, 0x72, 0xd0, 0x56, 0xe1, 0x46,
	0x6c, 0x28, 0xa8, 0x7e, 0x2b, 0xc1, 0x95, 0x2a, 0x71, 0xca, 0xb6, 0xf9, 0x1f, 0x91, 0xdd, 0x4e,
	0x93, 0x5d, 0x89, 0xc8, 0x46, 0x2c, 0xb4, 0x35, 0x58, 0x4d, 0x18, 0x04, 0xe1, 0x1f, 0x24, 0xb8,
	0x56, 0x25, 0xce, 0x91, 0x87, 0x1c, 0xc7, 0xf6, 0x78, 0xdd, 0xfd, 0x97, 0x39, 0x17, 0xd2, 0x9c,
	0xd7, 0x22, 0xce, 0x09, 0x22, 0x9a, 0x0a, 0x4a, 0xda, 0x26, 0x98, 0x7f, 0x95, 0x01, 0x99, 0xe5,
	0xc4, 0x6a, 0xe0, 0x11, 0x9e, 0x9e, 0x7b, 0x13, 0xe6, 0xcc, 0x36, 0xee, 0xba, 0x94, 0xdf, 0xa8,
	0x37, 0x5f, 0xa8, 0xf9, 0xfa, 0xf2, 0x03, 0x58, 0xe0, 0x3d, 0x61, 0x82, 0x4a, 0x14, 0x41, 0x0f,
	0xee, 0xf9, 0x4a, 0x45, 0x63, 0x5f, 0xab, 0xf5, 0xf8, 0xfe, 0x26, 0x52, 0xd7, 0x36, 0x40, 0x1d,
	0xb4, 0x0a, 0xbd, 0xbe, 0xcf, 0xb0, 0x33, 0xf0, 0x04, 0xd1, 0xa6, 0xe5, 0x99, 0xcf, 0xde, 0xf7,
	0x70, 0xfb, 0xff, 0x2c, 0xd9, 0x43, 0x80, 0x67, 0x9c, 0xaa, 0x7d, 0xb1, 0x66, 0x31, 0xec, 0xc1,
	0x7d, 0x5f, 0xb4, 0x98, 0xc1, 0x57, 0x6d, 0x23, 0x52, 0x6d, 0x50, 0x00, 0x6d, 0x13, 0xde, 0x1a,
	0xea, 0x10, 0xda, 0xfd, 0x22, 0xb1, 0xc7, 0x49, 0x50, 0xa9, 0x3e, 0x60, 0x0f, 0x1b, 0x7f, 0x4f,
	0xcd, 0x2e, 0x6d, 0x62, 0x0f, 0xd1, 0x3e, 0x53, 0x6d, 0xec, 0x9e, 0x0a, 0xa8, 0xfc, 0x1e, 0xcc,
	0x05, 0x4f, 0x23, 0xde, 0xcc, 0x6e, 0x0d, 0xad, 0xe3, 0x41, 0x10, 0x5e, 0xbe, 0xf9, 0x84, 0x83,
	0xbb, 0xec, 0x38, 0x88, 0xa5, 0x52, 0x5d, 0x3b, 0xce, 0x4e, 0x5b, 0x67, 0x5d, 0x3b, 0x6e, 0x0a,
	0x93, 0x29, 0xfe, 0x7a, 0x19, 0xb2, 0x55, 0xe2, 0xc8, 0x75, 0x58, 0x4a, 0xbc, 0xb6, 0x86, 0x37,
	0x94, 0x54, 0xef, 0x57, 0xef, 0x4d, 0x82, 0x12, 0x2f, 0x84, 0x63, 0x58, 0x8c, 0xb7, 0xfc, 0xad,
	0x51, 0x93, 0x63, 0x20, 0xf5, 0x9d, 0x09, 0x40, 0x22, 0xc0, 0x17, 0x12, 0x28, 0x23, 0x1b, 0xed,
	0xfd, 0xf1, 0x2b, 0x0d, 0xce, 0x50, 0x1f, 0x4e, 0x3b, 0x43, 0x10, 0xf9, 0x08, 0xe6, 0x45, 0x83,
	0xca, 0x8f, 0x5a, 0x25, 0x44, 0xa8, 0x85, 0x8b, 0x10, 0x62, 0xdd, 0x4f, 0x00, 0x62, 0xdd, 0x44,
	0x1b, 0x35, 0x2f, 0xc2, 0xa8, 0x3b, 0x17, 0x63, 0xc4, 0xea, 0x36, 0x5c, 0x49, 0x96, 0xfe, 0xed,
	0x51, 0x93, 0x13, 0x30, 0x75, 0x77, 0x22, 0x98, 0x08, 0xf3, 0x14, 0x96, 0xd3, 0x75, 0xfa, 0xce,
	0x68, 0x96, 0x09, 0xa0, 0x6a, 0x4c, 0x08, 0x14, 0xc1, 0x28, 0xc8, 0x43, 0x8a, 0xdc, 0x48, 0x55,
	0x06, 0xb1, 0x6a, 0x71, 0x72, 0xac, 0x88, 0x5a, 0x87, 0xa5, 0x44, 0x79, 0xb8, 0x3d, 0xfe, 0x24,
	0x05, 0xa8, 0xd1, 0xb7, 0x69, 0xd8, 0xcd, 0x55, 0x2f, 0x7d, 0xe6, 0x97, 0xc8, 0x52, 0xe5, 0xe5,
	0x69, 0x4e, 0x7a, 0x75, 0x9a, 0x93, 0xfe, 0x3e, 0xcd, 0x49, 0x5f, 0x9f, 0xe5, 0x66, 0x5e, 0x9d,
	0xe5, 0x66, 0xfe, 0x3c, 0xcb, 0xcd, 0x7c, 0x6c, 0xc4, 0x6a, 0xad, 0xbf, 0x30, 0x7b, 0x1f, 0x37,
	0x70, 0xcb, 0x68, 0x34, 0x4d, 0xe4, 0x1a, 0xbd, 0x7d, 0xe3, 0x79, 0xf8, 0x4f, 0x18, 0x2b, 0xbc,
	0xf5, 0x39, 0x86, 0xd8, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0x25, 0x2d, 0x57, 0x8e, 0x8d, 0x0e,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateTunnel is a RPC method to create a new tunnel.
	CreateTunnel(ctx context.Context, in *MsgCreateTunnel, opts ...grpc.CallOption) (*MsgCreateTunnelResponse, error)
	// UpdateRoute is a RPC method to update a route information of the tunnel.
	UpdateRoute(ctx context.Context, in *MsgUpdateRoute, opts ...grpc.CallOption) (*MsgUpdateRouteResponse, error)
	// UpdateSignalsAndInterval is a RPC method to update a signals and interval of the tunnel.
	UpdateSignalsAndInterval(ctx context.Context, in *MsgUpdateSignalsAndInterval, opts ...grpc.CallOption) (*MsgUpdateSignalsAndIntervalResponse, error)
	// Activate is a RPC method to activate a tunnel.
	Activate(ctx context.Context, in *MsgActivate, opts ...grpc.CallOption) (*MsgActivateResponse, error)
	// Deactivate is a RPC method to deactivate a tunnel.
	Deactivate(ctx context.Context, in *MsgDeactivate, opts ...grpc.CallOption) (*MsgDeactivateResponse, error)
	// TriggerTunnel is a RPC method to manually trigger a tunnel.
	TriggerTunnel(ctx context.Context, in *MsgTriggerTunnel, opts ...grpc.CallOption) (*MsgTriggerTunnelResponse, error)
	// DepositToTunnel is a RPC method to deposit to an existing tunnel.
	DepositToTunnel(ctx context.Context, in *MsgDepositToTunnel, opts ...grpc.CallOption) (*MsgDepositToTunnelResponse, error)
	// WithdrawFromTunnel is a RPC method to withdraw a deposit from an existing tunnel.
	WithdrawFromTunnel(ctx context.Context, in *MsgWithdrawFromTunnel, opts ...grpc.CallOption) (*MsgWithdrawFromTunnelResponse, error)
	// UpdateParams is a RPC method to update parameters
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateTunnel(ctx context.Context, in *MsgCreateTunnel, opts ...grpc.CallOption) (*MsgCreateTunnelResponse, error) {
	out := new(MsgCreateTunnelResponse)
	err := c.cc.Invoke(ctx, "/band.tunnel.v1beta1.Msg/CreateTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRoute(ctx context.Context, in *MsgUpdateRoute, opts ...grpc.CallOption) (*MsgUpdateRouteResponse, error) {
	out := new(MsgUpdateRouteResponse)
	err := c.cc.Invoke(ctx, "/band.tunnel.v1beta1.Msg/UpdateRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSignalsAndInterval(ctx context.Context, in *MsgUpdateSignalsAndInterval, opts ...grpc.CallOption) (*MsgUpdateSignalsAndIntervalResponse, error) {
	out := new(MsgUpdateSignalsAndIntervalResponse)
	err := c.cc.Invoke(ctx, "/band.tunnel.v1beta1.Msg/UpdateSignalsAndInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Activate(ctx context.Context, in *MsgActivate, opts ...grpc.CallOption) (*MsgActivateResponse, error) {
	out := new(MsgActivateResponse)
	err := c.cc.Invoke(ctx, "/band.tunnel.v1beta1.Msg/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Deactivate(ctx context.Context, in *MsgDeactivate, opts ...grpc.CallOption) (*MsgDeactivateResponse, error) {
	out := new(MsgDeactivateResponse)
	err := c.cc.Invoke(ctx, "/band.tunnel.v1beta1.Msg/Deactivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TriggerTunnel(ctx context.Context, in *MsgTriggerTunnel, opts ...grpc.CallOption) (*MsgTriggerTunnelResponse, error) {
	out := new(MsgTriggerTunnelResponse)
	err := c.cc.Invoke(ctx, "/band.tunnel.v1beta1.Msg/TriggerTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositToTunnel(ctx context.Context, in *MsgDepositToTunnel, opts ...grpc.CallOption) (*MsgDepositToTunnelResponse, error) {
	out := new(MsgDepositToTunnelResponse)
	err := c.cc.Invoke(ctx, "/band.tunnel.v1beta1.Msg/DepositToTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawFromTunnel(ctx context.Context, in *MsgWithdrawFromTunnel, opts ...grpc.CallOption) (*MsgWithdrawFromTunnelResponse, error) {
	out := new(MsgWithdrawFromTunnelResponse)
	err := c.cc.Invoke(ctx, "/band.tunnel.v1beta1.Msg/WithdrawFromTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/band.tunnel.v1beta1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateTunnel is a RPC method to create a new tunnel.
	CreateTunnel(context.Context, *MsgCreateTunnel) (*MsgCreateTunnelResponse, error)
	// UpdateRoute is a RPC method to update a route information of the tunnel.
	UpdateRoute(context.Context, *MsgUpdateRoute) (*MsgUpdateRouteResponse, error)
	// UpdateSignalsAndInterval is a RPC method to update a signals and interval of the tunnel.
	UpdateSignalsAndInterval(context.Context, *MsgUpdateSignalsAndInterval) (*MsgUpdateSignalsAndIntervalResponse, error)
	// Activate is a RPC method to activate a tunnel.
	Activate(context.Context, *MsgActivate) (*MsgActivateResponse, error)
	// Deactivate is a RPC method to deactivate a tunnel.
	Deactivate(context.Context, *MsgDeactivate) (*MsgDeactivateResponse, error)
	// TriggerTunnel is a RPC method to manually trigger a tunnel.
	TriggerTunnel(context.Context, *MsgTriggerTunnel) (*MsgTriggerTunnelResponse, error)
	// DepositToTunnel is a RPC method to deposit to an existing tunnel.
	DepositToTunnel(context.Context, *MsgDepositToTunnel) (*MsgDepositToTunnelResponse, error)
	// WithdrawFromTunnel is a RPC method to withdraw a deposit from an existing tunnel.
	WithdrawFromTunnel(context.Context, *MsgWithdrawFromTunnel) (*MsgWithdrawFromTunnelResponse, error)
	// UpdateParams is a RPC method to update parameters
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateTunnel(ctx context.Context, req *MsgCreateTunnel) (*MsgCreateTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (*UnimplementedMsgServer) UpdateRoute(ctx context.Context, req *MsgUpdateRoute) (*MsgUpdateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoute not implemented")
}
func (*UnimplementedMsgServer) UpdateSignalsAndInterval(ctx context.Context, req *MsgUpdateSignalsAndInterval) (*MsgUpdateSignalsAndIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSignalsAndInterval not implemented")
}
func (*UnimplementedMsgServer) Activate(ctx context.Context, req *MsgActivate) (*MsgActivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (*UnimplementedMsgServer) Deactivate(ctx context.Context, req *MsgDeactivate) (*MsgDeactivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}
func (*UnimplementedMsgServer) TriggerTunnel(ctx context.Context, req *MsgTriggerTunnel) (*MsgTriggerTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerTunnel not implemented")
}
func (*UnimplementedMsgServer) DepositToTunnel(ctx context.Context, req *MsgDepositToTunnel) (*MsgDepositToTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositToTunnel not implemented")
}
func (*UnimplementedMsgServer) WithdrawFromTunnel(ctx context.Context, req *MsgWithdrawFromTunnel) (*MsgWithdrawFromTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawFromTunnel not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTunnel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/band.tunnel.v1beta1.Msg/CreateTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTunnel(ctx, req.(*MsgCreateTunnel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/band.tunnel.v1beta1.Msg/UpdateRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRoute(ctx, req.(*MsgUpdateRoute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSignalsAndInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSignalsAndInterval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSignalsAndInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/band.tunnel.v1beta1.Msg/UpdateSignalsAndInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSignalsAndInterval(ctx, req.(*MsgUpdateSignalsAndInterval))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgActivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/band.tunnel.v1beta1.Msg/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Activate(ctx, req.(*MsgActivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeactivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/band.tunnel.v1beta1.Msg/Deactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Deactivate(ctx, req.(*MsgDeactivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TriggerTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTriggerTunnel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TriggerTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/band.tunnel.v1beta1.Msg/TriggerTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TriggerTunnel(ctx, req.(*MsgTriggerTunnel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositToTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositToTunnel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositToTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/band.tunnel.v1beta1.Msg/DepositToTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositToTunnel(ctx, req.(*MsgDepositToTunnel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawFromTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawFromTunnel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawFromTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/band.tunnel.v1beta1.Msg/WithdrawFromTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawFromTunnel(ctx, req.(*MsgWithdrawFromTunnel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/band.tunnel.v1beta1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "band.tunnel.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTunnel",
			Handler:    _Msg_CreateTunnel_Handler,
		},
		{
			MethodName: "UpdateRoute",
			Handler:    _Msg_UpdateRoute_Handler,
		},
		{
			MethodName: "UpdateSignalsAndInterval",
			Handler:    _Msg_UpdateSignalsAndInterval_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _Msg_Activate_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _Msg_Deactivate_Handler,
		},
		{
			MethodName: "TriggerTunnel",
			Handler:    _Msg_TriggerTunnel_Handler,
		},
		{
			MethodName: "DepositToTunnel",
			Handler:    _Msg_DepositToTunnel_Handler,
		},
		{
			MethodName: "WithdrawFromTunnel",
			Handler:    _Msg_WithdrawFromTunnel_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "band/tunnel/v1beta1/tx.proto",
}

func (m *MsgCreateTunnel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTunnel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTunnel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InitialDeposit) > 0 {
		for iNdEx := len(m.InitialDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitialDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Route != nil {
		{
			size, err := m.Route.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Interval != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SignalDeviations) > 0 {
		for iNdEx := len(m.SignalDeviations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignalDeviations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTunnelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTunnelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTunnelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TunnelID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TunnelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Route != nil {
		{
			size, err := m.Route.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TunnelID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TunnelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRouteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRouteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRouteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSignalsAndInterval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSignalsAndInterval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSignalsAndInterval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.Interval != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SignalDeviations) > 0 {
		for iNdEx := len(m.SignalDeviations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignalDeviations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TunnelID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TunnelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSignalsAndIntervalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSignalsAndIntervalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSignalsAndIntervalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgActivate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgActivate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgActivate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.TunnelID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TunnelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgActivateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgActivateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgActivateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeactivate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.TunnelID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TunnelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTriggerTunnel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTriggerTunnel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTriggerTunnel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.TunnelID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TunnelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTriggerTunnelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTriggerTunnelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTriggerTunnelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositToTunnel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToTunnel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToTunnel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TunnelID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TunnelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositToTunnelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositToTunnelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositToTunnelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFromTunnel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFromTunnel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFromTunnel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Withdrawer) > 0 {
		i -= len(m.Withdrawer)
		copy(dAtA[i:], m.Withdrawer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Withdrawer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TunnelID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TunnelID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFromTunnelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFromTunnelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFromTunnelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateTunnel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignalDeviations) > 0 {
		for _, e := range m.SignalDeviations {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Interval != 0 {
		n += 1 + sovTx(uint64(m.Interval))
	}
	if m.Route != nil {
		l = m.Route.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.InitialDeposit) > 0 {
		for _, e := range m.InitialDeposit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateTunnelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelID != 0 {
		n += 1 + sovTx(uint64(m.TunnelID))
	}
	return n
}

func (m *MsgUpdateRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelID != 0 {
		n += 1 + sovTx(uint64(m.TunnelID))
	}
	if m.Route != nil {
		l = m.Route.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateRouteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSignalsAndInterval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelID != 0 {
		n += 1 + sovTx(uint64(m.TunnelID))
	}
	if len(m.SignalDeviations) > 0 {
		for _, e := range m.SignalDeviations {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Interval != 0 {
		n += 1 + sovTx(uint64(m.Interval))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSignalsAndIntervalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgActivate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelID != 0 {
		n += 1 + sovTx(uint64(m.TunnelID))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgActivateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeactivate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelID != 0 {
		n += 1 + sovTx(uint64(m.TunnelID))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeactivateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTriggerTunnel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelID != 0 {
		n += 1 + sovTx(uint64(m.TunnelID))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTriggerTunnelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositToTunnel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelID != 0 {
		n += 1 + sovTx(uint64(m.TunnelID))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDepositToTunnelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawFromTunnel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelID != 0 {
		n += 1 + sovTx(uint64(m.TunnelID))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Withdrawer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawFromTunnelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateTunnel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTunnel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTunnel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalDeviations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalDeviations = append(m.SignalDeviations, SignalDeviation{})
			if err := m.SignalDeviations[len(m.SignalDeviations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Route == nil {
				m.Route = &types.Any{}
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialDeposit = append(m.InitialDeposit, types1.Coin{})
			if err := m.InitialDeposit[len(m.InitialDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTunnelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTunnelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTunnelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelID", wireType)
			}
			m.TunnelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelID", wireType)
			}
			m.TunnelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Route == nil {
				m.Route = &types.Any{}
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRouteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRouteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRouteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSignalsAndInterval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSignalsAndInterval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSignalsAndInterval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelID", wireType)
			}
			m.TunnelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalDeviations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalDeviations = append(m.SignalDeviations, SignalDeviation{})
			if err := m.SignalDeviations[len(m.SignalDeviations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSignalsAndIntervalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSignalsAndIntervalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSignalsAndIntervalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgActivate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgActivate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgActivate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelID", wireType)
			}
			m.TunnelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgActivateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgActivateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgActivateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelID", wireType)
			}
			m.TunnelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTriggerTunnel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTriggerTunnel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTriggerTunnel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelID", wireType)
			}
			m.TunnelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTriggerTunnelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTriggerTunnelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTriggerTunnelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositToTunnel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToTunnel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToTunnel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelID", wireType)
			}
			m.TunnelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types1.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositToTunnelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositToTunnelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositToTunnelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFromTunnel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFromTunnel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFromTunnel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelID", wireType)
			}
			m.TunnelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types1.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFromTunnelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFromTunnelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFromTunnelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
