// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bandtss/v1beta1/bandtss.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_bandprotocol_chain_v2_pkg_tss "github.com/bandprotocol/chain/v2/pkg/tss"
	github_com_cometbft_cometbft_libs_bytes "github.com/cometbft/cometbft/libs/bytes"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ReplacementStatus is an enumeration of the possible statuses of a group replacement process.
type ReplacementStatus int32

const (
	// REPLACEMENT_STATUS_UNSPECIFIED is the status of a group replacement that has not been specified.
	REPLACEMENT_STATUS_UNSPECIFIED ReplacementStatus = 0
	// REPLACEMENT_STATUS_WAITING_SIGNING is the status of a group replacement that is waiting
	// current group to sign the replacement message.
	REPLACEMENT_STATUS_WAITING_SIGNING ReplacementStatus = 1
	// REPLACEMENT_STATUS_WAITING_REPLACE is the status of a group replacement that is waiting
	// to be replaced in the protocol.
	REPLACEMENT_STATUS_WAITING_REPLACE ReplacementStatus = 2
	// REPLACEMENT_STATUS_SUCCESS is the status of a group replacement that has success in the protocol.
	REPLACEMENT_STATUS_SUCCESS ReplacementStatus = 3
	// REPLACEMENT_STATUS_FALLEN is the status of a group replacement that has fallen out of the protocol.
	REPLACEMENT_STATUS_FALLEN ReplacementStatus = 4
)

var ReplacementStatus_name = map[int32]string{
	0: "REPLACEMENT_STATUS_UNSPECIFIED",
	1: "REPLACEMENT_STATUS_WAITING_SIGNING",
	2: "REPLACEMENT_STATUS_WAITING_REPLACE",
	3: "REPLACEMENT_STATUS_SUCCESS",
	4: "REPLACEMENT_STATUS_FALLEN",
}

var ReplacementStatus_value = map[string]int32{
	"REPLACEMENT_STATUS_UNSPECIFIED":     0,
	"REPLACEMENT_STATUS_WAITING_SIGNING": 1,
	"REPLACEMENT_STATUS_WAITING_REPLACE": 2,
	"REPLACEMENT_STATUS_SUCCESS":         3,
	"REPLACEMENT_STATUS_FALLEN":          4,
}

func (x ReplacementStatus) String() string {
	return proto.EnumName(ReplacementStatus_name, int32(x))
}

func (ReplacementStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2effaef066b71284, []int{0}
}

// Member maintains member information for monitoring their liveness activity.
type Member struct {
	// address is the address of the member.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// is_active is a flag to indicate whether a member is active or not.
	IsActive bool `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// since is a block timestamp when a member has been activated/deactivated/jailed
	Since time.Time `protobuf:"bytes,3,opt,name=since,proto3,stdtime" json:"since"`
	// last_active is a latest block timestamp when a member is active
	LastActive time.Time `protobuf:"bytes,4,opt,name=last_active,json=lastActive,proto3,stdtime" json:"last_active"`
}

func (m *Member) Reset()         { *m = Member{} }
func (m *Member) String() string { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_2effaef066b71284, []int{0}
}
func (m *Member) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Member.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(m, src)
}
func (m *Member) XXX_Size() int {
	return m.Size()
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (m *Member) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Member) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Member) GetSince() time.Time {
	if m != nil {
		return m.Since
	}
	return time.Time{}
}

func (m *Member) GetLastActive() time.Time {
	if m != nil {
		return m.LastActive
	}
	return time.Time{}
}

// Signing is a bandtss signing information.
type Signing struct {
	// id is the unique identifier of the bandtss signing.
	ID SigningID `protobuf:"varint,1,opt,name=id,proto3,casttype=SigningID" json:"id,omitempty"`
	// fee is the tokens that will be paid per signer for this bandtss signing.
	Fee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=fee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee"`
	// requester is the address of requester who paid for the Bandtss signing.
	Requester string `protobuf:"bytes,3,opt,name=requester,proto3" json:"requester,omitempty"`
	// current_group_signing_id is a tss signing ID of a current group.
	CurrentGroupSigningID github_com_bandprotocol_chain_v2_pkg_tss.SigningID `protobuf:"varint,4,opt,name=current_group_signing_id,json=currentGroupSigningId,proto3,casttype=github.com/bandprotocol/chain/v2/pkg/tss.SigningID" json:"current_group_signing_id,omitempty"`
	// replacing_group_signing_id is a tss signing ID of the replacing group.
	ReplacingGroupSigningID github_com_bandprotocol_chain_v2_pkg_tss.SigningID `protobuf:"varint,5,opt,name=replacing_group_signing_id,json=replacingGroupSigningId,proto3,casttype=github.com/bandprotocol/chain/v2/pkg/tss.SigningID" json:"replacing_group_signing_id,omitempty"`
}

func (m *Signing) Reset()         { *m = Signing{} }
func (m *Signing) String() string { return proto.CompactTextString(m) }
func (*Signing) ProtoMessage()    {}
func (*Signing) Descriptor() ([]byte, []int) {
	return fileDescriptor_2effaef066b71284, []int{1}
}
func (m *Signing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signing.Merge(m, src)
}
func (m *Signing) XXX_Size() int {
	return m.Size()
}
func (m *Signing) XXX_DiscardUnknown() {
	xxx_messageInfo_Signing.DiscardUnknown(m)
}

var xxx_messageInfo_Signing proto.InternalMessageInfo

func (m *Signing) GetID() SigningID {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Signing) GetFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *Signing) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *Signing) GetCurrentGroupSigningID() github_com_bandprotocol_chain_v2_pkg_tss.SigningID {
	if m != nil {
		return m.CurrentGroupSigningID
	}
	return 0
}

func (m *Signing) GetReplacingGroupSigningID() github_com_bandprotocol_chain_v2_pkg_tss.SigningID {
	if m != nil {
		return m.ReplacingGroupSigningID
	}
	return 0
}

type Replacement struct {
	// signing_id is a tss signing ID of the replacing group signing request.
	SigningID github_com_bandprotocol_chain_v2_pkg_tss.SigningID `protobuf:"varint,1,opt,name=signing_id,json=signingId,proto3,casttype=github.com/bandprotocol/chain/v2/pkg/tss.SigningID" json:"signing_id,omitempty"`
	// current_group_id is the ID of the group that will be replaced.
	CurrentGroupID github_com_bandprotocol_chain_v2_pkg_tss.GroupID `protobuf:"varint,2,opt,name=current_group_id,json=currentGroupId,proto3,casttype=github.com/bandprotocol/chain/v2/pkg/tss.GroupID" json:"current_group_id,omitempty"`
	// current_pub_key is the public key pair that used for sign & verify replace group msg.
	CurrentPubKey github_com_bandprotocol_chain_v2_pkg_tss.Point `protobuf:"bytes,3,opt,name=current_pub_key,json=currentPubKey,proto3,casttype=github.com/bandprotocol/chain/v2/pkg/tss.Point" json:"current_pub_key,omitempty"`
	// new_group_id is the ID of the new group that be a new key candidate.
	NewGroupID github_com_bandprotocol_chain_v2_pkg_tss.GroupID `protobuf:"varint,4,opt,name=new_group_id,json=newGroupId,proto3,casttype=github.com/bandprotocol/chain/v2/pkg/tss.GroupID" json:"new_group_id,omitempty"`
	// new_pub_key is the public key of the group that will be the next key of this group
	NewPubKey github_com_bandprotocol_chain_v2_pkg_tss.Point `protobuf:"bytes,5,opt,name=new_pub_key,json=newPubKey,proto3,casttype=github.com/bandprotocol/chain/v2/pkg/tss.Point" json:"new_pub_key,omitempty"`
	// status is an enumeration of the possible statuses of a group replacement process.
	Status ReplacementStatus `protobuf:"varint,6,opt,name=status,proto3,enum=bandtss.v1beta1.ReplacementStatus" json:"status,omitempty"`
	// exec_time is the time when the replacement will be executed.
	ExecTime time.Time `protobuf:"bytes,7,opt,name=exec_time,json=execTime,proto3,stdtime" json:"exec_time"`
}

func (m *Replacement) Reset()         { *m = Replacement{} }
func (m *Replacement) String() string { return proto.CompactTextString(m) }
func (*Replacement) ProtoMessage()    {}
func (*Replacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_2effaef066b71284, []int{2}
}
func (m *Replacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Replacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Replacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Replacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Replacement.Merge(m, src)
}
func (m *Replacement) XXX_Size() int {
	return m.Size()
}
func (m *Replacement) XXX_DiscardUnknown() {
	xxx_messageInfo_Replacement.DiscardUnknown(m)
}

var xxx_messageInfo_Replacement proto.InternalMessageInfo

func (m *Replacement) GetSigningID() github_com_bandprotocol_chain_v2_pkg_tss.SigningID {
	if m != nil {
		return m.SigningID
	}
	return 0
}

func (m *Replacement) GetCurrentGroupID() github_com_bandprotocol_chain_v2_pkg_tss.GroupID {
	if m != nil {
		return m.CurrentGroupID
	}
	return 0
}

func (m *Replacement) GetCurrentPubKey() github_com_bandprotocol_chain_v2_pkg_tss.Point {
	if m != nil {
		return m.CurrentPubKey
	}
	return nil
}

func (m *Replacement) GetNewGroupID() github_com_bandprotocol_chain_v2_pkg_tss.GroupID {
	if m != nil {
		return m.NewGroupID
	}
	return 0
}

func (m *Replacement) GetNewPubKey() github_com_bandprotocol_chain_v2_pkg_tss.Point {
	if m != nil {
		return m.NewPubKey
	}
	return nil
}

func (m *Replacement) GetStatus() ReplacementStatus {
	if m != nil {
		return m.Status
	}
	return REPLACEMENT_STATUS_UNSPECIFIED
}

func (m *Replacement) GetExecTime() time.Time {
	if m != nil {
		return m.ExecTime
	}
	return time.Time{}
}

// ReplaceGroupSignatureOrder defines a general signature order for group replacement.
type ReplaceGroupSignatureOrder struct {
	// pub_key is the public key of new group that the current group needs to be signed.
	PubKey github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"pub_key,omitempty"`
}

func (m *ReplaceGroupSignatureOrder) Reset()         { *m = ReplaceGroupSignatureOrder{} }
func (m *ReplaceGroupSignatureOrder) String() string { return proto.CompactTextString(m) }
func (*ReplaceGroupSignatureOrder) ProtoMessage()    {}
func (*ReplaceGroupSignatureOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2effaef066b71284, []int{3}
}
func (m *ReplaceGroupSignatureOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceGroupSignatureOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplaceGroupSignatureOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplaceGroupSignatureOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceGroupSignatureOrder.Merge(m, src)
}
func (m *ReplaceGroupSignatureOrder) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceGroupSignatureOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceGroupSignatureOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceGroupSignatureOrder proto.InternalMessageInfo

func (m *ReplaceGroupSignatureOrder) GetPubKey() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func init() {
	proto.RegisterEnum("bandtss.v1beta1.ReplacementStatus", ReplacementStatus_name, ReplacementStatus_value)
	proto.RegisterType((*Member)(nil), "bandtss.v1beta1.Member")
	proto.RegisterType((*Signing)(nil), "bandtss.v1beta1.Signing")
	proto.RegisterType((*Replacement)(nil), "bandtss.v1beta1.Replacement")
	proto.RegisterType((*ReplaceGroupSignatureOrder)(nil), "bandtss.v1beta1.ReplaceGroupSignatureOrder")
}

func init() { proto.RegisterFile("bandtss/v1beta1/bandtss.proto", fileDescriptor_2effaef066b71284) }

var fileDescriptor_2effaef066b71284 = []byte{
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xd6, 0x4a, 0xb2, 0x64, 0xad, 0x52, 0x47, 0xdd, 0x36, 0x88, 0xac, 0x36, 0xa4, 0xa1, 0x02,
	0x85, 0x50, 0x20, 0x64, 0xa2, 0xf6, 0xe4, 0x9b, 0x28, 0xcb, 0x2e, 0x51, 0x9b, 0x71, 0x49, 0x19,
	0x05, 0x02, 0x14, 0x04, 0x7f, 0xd6, 0xcc, 0xc2, 0x12, 0xc9, 0x72, 0x97, 0xfe, 0x79, 0x83, 0x9c,
	0x8a, 0x3c, 0x42, 0x81, 0x5e, 0x8a, 0x9e, 0xfb, 0x10, 0x46, 0xd1, 0x02, 0x39, 0xf6, 0xc4, 0x14,
	0xf4, 0xa5, 0x8f, 0x50, 0xf8, 0x54, 0x70, 0x49, 0x5a, 0x6a, 0x22, 0x20, 0x3f, 0xed, 0x49, 0x3b,
	0x9a, 0x6f, 0x66, 0xbe, 0x6f, 0x66, 0x30, 0x84, 0xf7, 0x6c, 0xcb, 0x77, 0x19, 0xa5, 0xf2, 0xe9,
	0x43, 0x1b, 0x33, 0xeb, 0xa1, 0x5c, 0xd8, 0x52, 0x18, 0x05, 0x2c, 0x40, 0xb7, 0x4b, 0xb3, 0x70,
	0xf7, 0x3e, 0xf4, 0x02, 0x2f, 0xe0, 0x3e, 0x39, 0x7b, 0xe5, 0xb0, 0x9e, 0xe8, 0x05, 0x81, 0x37,
	0xc3, 0x32, 0xb7, 0xec, 0xf8, 0x58, 0x66, 0x64, 0x8e, 0x29, 0xb3, 0xe6, 0x61, 0x01, 0x10, 0x9c,
	0x80, 0xce, 0x03, 0x2a, 0xdb, 0x16, 0xc5, 0x37, 0xa5, 0x9c, 0x80, 0xf8, 0x85, 0x7f, 0x33, 0xf7,
	0x9b, 0x79, 0xe6, 0xdc, 0xc8, 0x5d, 0xfd, 0x4b, 0x00, 0x1b, 0x07, 0x78, 0x6e, 0xe3, 0x08, 0x75,
	0x61, 0xd3, 0x72, 0xdd, 0x08, 0x53, 0xda, 0x05, 0x5b, 0x60, 0xd0, 0xd2, 0x4b, 0x13, 0x7d, 0x04,
	0x5b, 0x84, 0x9a, 0x96, 0xc3, 0xc8, 0x29, 0xee, 0x56, 0xb7, 0xc0, 0x60, 0x5d, 0x5f, 0x27, 0x74,
	0xc4, 0x6d, 0xb4, 0x0d, 0xd7, 0x28, 0xf1, 0x1d, 0xdc, 0xad, 0x6d, 0x81, 0x41, 0x7b, 0xd8, 0x93,
	0x72, 0xb6, 0x52, 0xc9, 0x56, 0x9a, 0x96, 0x6c, 0x95, 0xf5, 0xcb, 0x44, 0xac, 0x3c, 0x7b, 0x21,
	0x02, 0x3d, 0x0f, 0x41, 0x13, 0xd8, 0x9e, 0x59, 0x94, 0x95, 0xa9, 0xeb, 0x6f, 0x91, 0x01, 0x66,
	0x81, 0x39, 0x85, 0xed, 0xfa, 0x5f, 0x3f, 0x88, 0xa0, 0xff, 0x7b, 0x0d, 0x36, 0x0d, 0xe2, 0xf9,
	0xc4, 0xf7, 0xd0, 0x27, 0xb0, 0x4a, 0x5c, 0x2e, 0xa3, 0xae, 0x7c, 0x90, 0x26, 0x62, 0x55, 0xdd,
	0xb9, 0x4e, 0xc4, 0x56, 0xe1, 0x56, 0x77, 0xf4, 0x2a, 0x71, 0xd1, 0xb7, 0xb0, 0x76, 0x8c, 0x33,
	0x41, 0xb5, 0x41, 0x7b, 0xb8, 0x29, 0x15, 0x7d, 0xc9, 0x9a, 0x58, 0x0e, 0x44, 0x1a, 0x07, 0xc4,
	0x57, 0x1e, 0x64, 0x45, 0x7f, 0x7e, 0x21, 0x0e, 0x3c, 0xc2, 0x9e, 0xc4, 0xb6, 0xe4, 0x04, 0xf3,
	0xa2, 0x89, 0xc5, 0xcf, 0x7d, 0xea, 0x9e, 0xc8, 0xec, 0x22, 0xc4, 0x94, 0x07, 0x50, 0x3d, 0xcb,
	0x8b, 0x3e, 0x86, 0xad, 0x08, 0x7f, 0x17, 0x63, 0xca, 0x70, 0xc4, 0x9b, 0xd3, 0xd2, 0x17, 0x7f,
	0xa0, 0xa7, 0x00, 0x76, 0x9d, 0x38, 0x8a, 0xb0, 0xcf, 0x4c, 0x2f, 0x0a, 0xe2, 0xd0, 0xa4, 0x39,
	0x39, 0x93, 0xb8, 0xbc, 0x11, 0x75, 0xe5, 0x51, 0x9a, 0x88, 0x77, 0xc6, 0x39, 0x66, 0x2f, 0x83,
	0xdc, 0xd0, 0xbf, 0x4e, 0xc4, 0xe1, 0x12, 0x99, 0x6c, 0x8d, 0x78, 0xb3, 0x9c, 0x60, 0x26, 0x3b,
	0x4f, 0x2c, 0xe2, 0xcb, 0xa7, 0x43, 0x39, 0x3c, 0xf1, 0xe4, 0x6c, 0xb9, 0x16, 0xa2, 0xef, 0x38,
	0x2b, 0x92, 0xb9, 0xe8, 0x7b, 0x00, 0x7b, 0x11, 0x0e, 0x67, 0x96, 0x93, 0x95, 0x7f, 0x85, 0xcc,
	0x1a, 0x27, 0xf3, 0x75, 0x9a, 0x88, 0x77, 0xf5, 0x12, 0xf5, 0xbf, 0xd0, 0xb9, 0x1b, 0xad, 0x4c,
	0xe7, 0x16, 0xf3, 0xfc, 0xbb, 0x0e, 0xdb, 0x79, 0x41, 0x3c, 0xc7, 0x3e, 0x43, 0x36, 0x84, 0x4b,
	0xac, 0xf2, 0xd9, 0x8e, 0xd3, 0xe5, 0xa9, 0xbe, 0x23, 0x8f, 0x16, 0xbd, 0x69, 0x45, 0x08, 0x3b,
	0xff, 0x1e, 0x0a, 0x71, 0xf9, 0xc2, 0xd7, 0x95, 0xdd, 0x34, 0x11, 0x37, 0x96, 0x87, 0xc1, 0xcb,
	0x3d, 0x78, 0xe3, 0x72, 0x45, 0x8c, 0xbe, 0xb1, 0x3c, 0x03, 0xd5, 0x45, 0x8f, 0xe1, 0xed, 0xb2,
	0x62, 0x18, 0xdb, 0xe6, 0x09, 0xbe, 0xe0, 0xbb, 0x72, 0x4b, 0x19, 0x5e, 0x27, 0xa2, 0xf4, 0xc6,
	0xe9, 0x0f, 0x03, 0xe2, 0x33, 0xfd, 0xbd, 0x22, 0xd5, 0x61, 0x6c, 0x7f, 0x85, 0x2f, 0x90, 0x0b,
	0x6f, 0xf9, 0xf8, 0x6c, 0xa1, 0x24, 0x5f, 0x2b, 0x25, 0x4d, 0x44, 0xa8, 0xe1, 0xb3, 0xff, 0xa2,
	0x02, 0xfa, 0x65, 0xbc, 0x8b, 0x74, 0xd8, 0xce, 0xaa, 0x94, 0xec, 0xd7, 0xde, 0x99, 0x7d, 0xcb,
	0xc7, 0x67, 0x05, 0xf3, 0x6d, 0xd8, 0xa0, 0xcc, 0x62, 0x31, 0xed, 0x36, 0xb6, 0xc0, 0x60, 0x63,
	0xd8, 0x97, 0x5e, 0x3a, 0x95, 0xd2, 0xd2, 0x66, 0x18, 0x1c, 0xa9, 0x17, 0x11, 0x68, 0x04, 0x5b,
	0xf8, 0x1c, 0x3b, 0x66, 0x76, 0x25, 0xbb, 0xcd, 0xb7, 0x38, 0x29, 0xeb, 0x59, 0x58, 0xe6, 0xe8,
	0x9f, 0xc3, 0x5e, 0x91, 0xff, 0x66, 0x33, 0x2d, 0x16, 0x47, 0xf8, 0x51, 0xe4, 0xe2, 0x08, 0x1d,
	0xc0, 0x66, 0x29, 0x16, 0x70, 0xb1, 0x5f, 0xbc, 0xd4, 0x43, 0x27, 0x98, 0x63, 0x66, 0x1f, 0xb3,
	0xc5, 0x63, 0x46, 0x6c, 0x2a, 0xdb, 0x17, 0x0c, 0x53, 0xe9, 0x4b, 0x7c, 0xae, 0x64, 0x0f, 0xbd,
	0x11, 0x72, 0xad, 0xdb, 0xed, 0x5f, 0x7f, 0xb9, 0xdf, 0x1c, 0x07, 0x3e, 0xc3, 0x3e, 0xfb, 0xec,
	0x37, 0x00, 0xdf, 0x7f, 0x45, 0x1a, 0xea, 0x43, 0x41, 0x9f, 0x1c, 0xee, 0x8f, 0xc6, 0x93, 0x83,
	0x89, 0x36, 0x35, 0x8d, 0xe9, 0x68, 0x7a, 0x64, 0x98, 0x47, 0x9a, 0x71, 0x38, 0x19, 0xab, 0xbb,
	0xea, 0x64, 0xa7, 0x53, 0x41, 0x9f, 0xc2, 0xfe, 0x0a, 0xcc, 0x37, 0x23, 0x75, 0xaa, 0x6a, 0x7b,
	0xa6, 0xa1, 0xee, 0x69, 0xaa, 0xb6, 0xd7, 0x01, 0xaf, 0xc1, 0x15, 0xae, 0x4e, 0x15, 0x09, 0xb0,
	0xb7, 0x02, 0x67, 0x1c, 0x8d, 0xc7, 0x13, 0xc3, 0xe8, 0xd4, 0xd0, 0x3d, 0xb8, 0xb9, 0xc2, 0xbf,
	0x3b, 0xda, 0xdf, 0x9f, 0x68, 0x9d, 0x7a, 0xaf, 0xfe, 0xf4, 0x47, 0xa1, 0xa2, 0x68, 0x3f, 0xa5,
	0x02, 0xb8, 0x4c, 0x05, 0xf0, 0x3c, 0x15, 0xc0, 0x9f, 0xa9, 0x00, 0x9e, 0x5d, 0x09, 0x95, 0xe7,
	0x57, 0x42, 0xe5, 0x8f, 0x2b, 0xa1, 0xf2, 0xf8, 0xf5, 0x7b, 0x77, 0x5e, 0x7e, 0x31, 0xf3, 0xf3,
	0x6a, 0x37, 0x38, 0xe4, 0xf3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xaa, 0x16, 0x35, 0x59,
	0x07, 0x00, 0x00,
}

func (this *Member) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Member)
	if !ok {
		that2, ok := that.(Member)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.IsActive != that1.IsActive {
		return false
	}
	if !this.Since.Equal(that1.Since) {
		return false
	}
	if !this.LastActive.Equal(that1.LastActive) {
		return false
	}
	return true
}
func (this *Signing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Signing)
	if !ok {
		that2, ok := that.(Signing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if len(this.Fee) != len(that1.Fee) {
		return false
	}
	for i := range this.Fee {
		if !this.Fee[i].Equal(&that1.Fee[i]) {
			return false
		}
	}
	if this.Requester != that1.Requester {
		return false
	}
	if this.CurrentGroupSigningID != that1.CurrentGroupSigningID {
		return false
	}
	if this.ReplacingGroupSigningID != that1.ReplacingGroupSigningID {
		return false
	}
	return true
}
func (this *Replacement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Replacement)
	if !ok {
		that2, ok := that.(Replacement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SigningID != that1.SigningID {
		return false
	}
	if this.CurrentGroupID != that1.CurrentGroupID {
		return false
	}
	if !bytes.Equal(this.CurrentPubKey, that1.CurrentPubKey) {
		return false
	}
	if this.NewGroupID != that1.NewGroupID {
		return false
	}
	if !bytes.Equal(this.NewPubKey, that1.NewPubKey) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.ExecTime.Equal(that1.ExecTime) {
		return false
	}
	return true
}
func (this *ReplaceGroupSignatureOrder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceGroupSignatureOrder)
	if !ok {
		that2, ok := that.(ReplaceGroupSignatureOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PubKey, that1.PubKey) {
		return false
	}
	return true
}
func (m *Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Member) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Member) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastActive, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastActive):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintBandtss(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Since, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Since):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintBandtss(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBandtss(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Signing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReplacingGroupSigningID != 0 {
		i = encodeVarintBandtss(dAtA, i, uint64(m.ReplacingGroupSigningID))
		i--
		dAtA[i] = 0x28
	}
	if m.CurrentGroupSigningID != 0 {
		i = encodeVarintBandtss(dAtA, i, uint64(m.CurrentGroupSigningID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintBandtss(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Fee) > 0 {
		for iNdEx := len(m.Fee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBandtss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ID != 0 {
		i = encodeVarintBandtss(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Replacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Replacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ExecTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExecTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintBandtss(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x3a
	if m.Status != 0 {
		i = encodeVarintBandtss(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.NewPubKey) > 0 {
		i -= len(m.NewPubKey)
		copy(dAtA[i:], m.NewPubKey)
		i = encodeVarintBandtss(dAtA, i, uint64(len(m.NewPubKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.NewGroupID != 0 {
		i = encodeVarintBandtss(dAtA, i, uint64(m.NewGroupID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CurrentPubKey) > 0 {
		i -= len(m.CurrentPubKey)
		copy(dAtA[i:], m.CurrentPubKey)
		i = encodeVarintBandtss(dAtA, i, uint64(len(m.CurrentPubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CurrentGroupID != 0 {
		i = encodeVarintBandtss(dAtA, i, uint64(m.CurrentGroupID))
		i--
		dAtA[i] = 0x10
	}
	if m.SigningID != 0 {
		i = encodeVarintBandtss(dAtA, i, uint64(m.SigningID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceGroupSignatureOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceGroupSignatureOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceGroupSignatureOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintBandtss(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBandtss(dAtA []byte, offset int, v uint64) int {
	offset -= sovBandtss(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Member) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBandtss(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Since)
	n += 1 + l + sovBandtss(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastActive)
	n += 1 + l + sovBandtss(uint64(l))
	return n
}

func (m *Signing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBandtss(uint64(m.ID))
	}
	if len(m.Fee) > 0 {
		for _, e := range m.Fee {
			l = e.Size()
			n += 1 + l + sovBandtss(uint64(l))
		}
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovBandtss(uint64(l))
	}
	if m.CurrentGroupSigningID != 0 {
		n += 1 + sovBandtss(uint64(m.CurrentGroupSigningID))
	}
	if m.ReplacingGroupSigningID != 0 {
		n += 1 + sovBandtss(uint64(m.ReplacingGroupSigningID))
	}
	return n
}

func (m *Replacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SigningID != 0 {
		n += 1 + sovBandtss(uint64(m.SigningID))
	}
	if m.CurrentGroupID != 0 {
		n += 1 + sovBandtss(uint64(m.CurrentGroupID))
	}
	l = len(m.CurrentPubKey)
	if l > 0 {
		n += 1 + l + sovBandtss(uint64(l))
	}
	if m.NewGroupID != 0 {
		n += 1 + sovBandtss(uint64(m.NewGroupID))
	}
	l = len(m.NewPubKey)
	if l > 0 {
		n += 1 + l + sovBandtss(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBandtss(uint64(m.Status))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExecTime)
	n += 1 + l + sovBandtss(uint64(l))
	return n
}

func (m *ReplaceGroupSignatureOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovBandtss(uint64(l))
	}
	return n
}

func sovBandtss(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBandtss(x uint64) (n int) {
	return sovBandtss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandtss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandtss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBandtss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandtss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBandtss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Since, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandtss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBandtss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastActive, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBandtss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBandtss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandtss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= SigningID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandtss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBandtss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = append(m.Fee, types.Coin{})
			if err := m.Fee[len(m.Fee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandtss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBandtss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentGroupSigningID", wireType)
			}
			m.CurrentGroupSigningID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentGroupSigningID |= github_com_bandprotocol_chain_v2_pkg_tss.SigningID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplacingGroupSigningID", wireType)
			}
			m.ReplacingGroupSigningID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplacingGroupSigningID |= github_com_bandprotocol_chain_v2_pkg_tss.SigningID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBandtss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBandtss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Replacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandtss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Replacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Replacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningID", wireType)
			}
			m.SigningID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigningID |= github_com_bandprotocol_chain_v2_pkg_tss.SigningID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentGroupID", wireType)
			}
			m.CurrentGroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentGroupID |= github_com_bandprotocol_chain_v2_pkg_tss.GroupID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBandtss
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBandtss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentPubKey = append(m.CurrentPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentPubKey == nil {
				m.CurrentPubKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGroupID", wireType)
			}
			m.NewGroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewGroupID |= github_com_bandprotocol_chain_v2_pkg_tss.GroupID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBandtss
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBandtss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPubKey = append(m.NewPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NewPubKey == nil {
				m.NewPubKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ReplacementStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandtss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBandtss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ExecTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBandtss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBandtss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceGroupSignatureOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandtss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceGroupSignatureOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceGroupSignatureOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBandtss
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBandtss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBandtss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBandtss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBandtss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBandtss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBandtss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBandtss
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBandtss
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBandtss
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBandtss        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBandtss          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBandtss = fmt.Errorf("proto: unexpected end of group")
)
