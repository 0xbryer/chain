// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: feeds/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateSymbols is the transaction message to add and update symbols.
type MsgUpdateSymbols struct {
	// The address of the admin that is performing the operation.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// A list of symbols to update or add.
	Symbols []UpdateSymbol `protobuf:"bytes,2,rep,name=symbols,proto3" json:"symbols"`
}

func (m *MsgUpdateSymbols) Reset()         { *m = MsgUpdateSymbols{} }
func (m *MsgUpdateSymbols) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSymbols) ProtoMessage()    {}
func (*MsgUpdateSymbols) Descriptor() ([]byte, []int) {
	return fileDescriptor_72c83eeeb8b31e80, []int{0}
}
func (m *MsgUpdateSymbols) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSymbols) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSymbols.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSymbols) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSymbols.Merge(m, src)
}
func (m *MsgUpdateSymbols) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSymbols) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSymbols.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSymbols proto.InternalMessageInfo

func (m *MsgUpdateSymbols) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgUpdateSymbols) GetSymbols() []UpdateSymbol {
	if m != nil {
		return m.Symbols
	}
	return nil
}

// MsgUpdateSymbolsResponse is the response type for the Msg/UpdateSymbols RPC method.
type MsgUpdateSymbolsResponse struct {
}

func (m *MsgUpdateSymbolsResponse) Reset()         { *m = MsgUpdateSymbolsResponse{} }
func (m *MsgUpdateSymbolsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSymbolsResponse) ProtoMessage()    {}
func (*MsgUpdateSymbolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72c83eeeb8b31e80, []int{1}
}
func (m *MsgUpdateSymbolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSymbolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSymbolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSymbolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSymbolsResponse.Merge(m, src)
}
func (m *MsgUpdateSymbolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSymbolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSymbolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSymbolsResponse proto.InternalMessageInfo

// MsgRemoveSymbols is the transaction message to remove symbols.
type MsgRemoveSymbols struct {
	// The address of the admin that is performing the operation.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// A list of symbols to remove.
	Symbols []string `protobuf:"bytes,2,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (m *MsgRemoveSymbols) Reset()         { *m = MsgRemoveSymbols{} }
func (m *MsgRemoveSymbols) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveSymbols) ProtoMessage()    {}
func (*MsgRemoveSymbols) Descriptor() ([]byte, []int) {
	return fileDescriptor_72c83eeeb8b31e80, []int{2}
}
func (m *MsgRemoveSymbols) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveSymbols) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveSymbols.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveSymbols) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveSymbols.Merge(m, src)
}
func (m *MsgRemoveSymbols) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveSymbols) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveSymbols.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveSymbols proto.InternalMessageInfo

func (m *MsgRemoveSymbols) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgRemoveSymbols) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

// MsgRemoveSymbolsResponse is the response type for the Msg/RemoveSymbols RPC method.
type MsgRemoveSymbolsResponse struct {
}

func (m *MsgRemoveSymbolsResponse) Reset()         { *m = MsgRemoveSymbolsResponse{} }
func (m *MsgRemoveSymbolsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveSymbolsResponse) ProtoMessage()    {}
func (*MsgRemoveSymbolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72c83eeeb8b31e80, []int{3}
}
func (m *MsgRemoveSymbolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveSymbolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveSymbolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveSymbolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveSymbolsResponse.Merge(m, src)
}
func (m *MsgRemoveSymbolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveSymbolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveSymbolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveSymbolsResponse proto.InternalMessageInfo

// MsgSubmitPrices is the transaction message to submit multiple prices.
type MsgSubmitPrices struct {
	// The address of the validator that is performing the operation.
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	// The timestamp use as reference of the data.
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// A list of prices to submit.
	Prices []SubmitPrice `protobuf:"bytes,3,rep,name=prices,proto3" json:"prices"`
}

func (m *MsgSubmitPrices) Reset()         { *m = MsgSubmitPrices{} }
func (m *MsgSubmitPrices) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPrices) ProtoMessage()    {}
func (*MsgSubmitPrices) Descriptor() ([]byte, []int) {
	return fileDescriptor_72c83eeeb8b31e80, []int{4}
}
func (m *MsgSubmitPrices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPrices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPrices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPrices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPrices.Merge(m, src)
}
func (m *MsgSubmitPrices) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPrices) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPrices.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPrices proto.InternalMessageInfo

func (m *MsgSubmitPrices) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgSubmitPrices) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MsgSubmitPrices) GetPrices() []SubmitPrice {
	if m != nil {
		return m.Prices
	}
	return nil
}

// MsgSubmitPricesResponse is the response type for the Msg/SubmitPrices RPC method.
type MsgSubmitPricesResponse struct {
}

func (m *MsgSubmitPricesResponse) Reset()         { *m = MsgSubmitPricesResponse{} }
func (m *MsgSubmitPricesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPricesResponse) ProtoMessage()    {}
func (*MsgSubmitPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72c83eeeb8b31e80, []int{5}
}
func (m *MsgSubmitPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPricesResponse.Merge(m, src)
}
func (m *MsgSubmitPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPricesResponse proto.InternalMessageInfo

// MsgUpdateOffChain is the transaction message to update off-chain information.
type MsgUpdateOffChain struct {
	// The address of the admin that is performing the operation.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// off-chain program information
	OffChain OffChain `protobuf:"bytes,2,opt,name=off_chain,json=offChain,proto3" json:"off_chain"`
}

func (m *MsgUpdateOffChain) Reset()         { *m = MsgUpdateOffChain{} }
func (m *MsgUpdateOffChain) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOffChain) ProtoMessage()    {}
func (*MsgUpdateOffChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_72c83eeeb8b31e80, []int{6}
}
func (m *MsgUpdateOffChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOffChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOffChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOffChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOffChain.Merge(m, src)
}
func (m *MsgUpdateOffChain) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOffChain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOffChain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOffChain proto.InternalMessageInfo

func (m *MsgUpdateOffChain) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgUpdateOffChain) GetOffChain() OffChain {
	if m != nil {
		return m.OffChain
	}
	return OffChain{}
}

// MsgUpdateOffChainResponse is the response type for the Msg/UpdateOffChain RPC method.
type MsgUpdateOffChainResponse struct {
}

func (m *MsgUpdateOffChainResponse) Reset()         { *m = MsgUpdateOffChainResponse{} }
func (m *MsgUpdateOffChainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOffChainResponse) ProtoMessage()    {}
func (*MsgUpdateOffChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72c83eeeb8b31e80, []int{7}
}
func (m *MsgUpdateOffChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOffChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOffChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOffChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOffChainResponse.Merge(m, src)
}
func (m *MsgUpdateOffChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOffChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOffChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOffChainResponse proto.InternalMessageInfo

// MsgUpdateParams is the transaction message to update parameters.
type MsgUpdateParams struct {
	// authority is the address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/feeds parameters to update.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_72c83eeeb8b31e80, []int{8}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse is the response type for the Msg/UpdateParams RPC method.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72c83eeeb8b31e80, []int{9}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateSymbols)(nil), "feeds.v1beta1.MsgUpdateSymbols")
	proto.RegisterType((*MsgUpdateSymbolsResponse)(nil), "feeds.v1beta1.MsgUpdateSymbolsResponse")
	proto.RegisterType((*MsgRemoveSymbols)(nil), "feeds.v1beta1.MsgRemoveSymbols")
	proto.RegisterType((*MsgRemoveSymbolsResponse)(nil), "feeds.v1beta1.MsgRemoveSymbolsResponse")
	proto.RegisterType((*MsgSubmitPrices)(nil), "feeds.v1beta1.MsgSubmitPrices")
	proto.RegisterType((*MsgSubmitPricesResponse)(nil), "feeds.v1beta1.MsgSubmitPricesResponse")
	proto.RegisterType((*MsgUpdateOffChain)(nil), "feeds.v1beta1.MsgUpdateOffChain")
	proto.RegisterType((*MsgUpdateOffChainResponse)(nil), "feeds.v1beta1.MsgUpdateOffChainResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "feeds.v1beta1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "feeds.v1beta1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("feeds/v1beta1/tx.proto", fileDescriptor_72c83eeeb8b31e80) }

var fileDescriptor_72c83eeeb8b31e80 = []byte{
	// 638 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x31, 0x6f, 0xd3, 0x40,
	0x18, 0x8d, 0x1b, 0x28, 0xf8, 0x4a, 0x81, 0x9a, 0x96, 0x3a, 0x2e, 0x72, 0xa3, 0x0c, 0x25, 0x54,
	0xc2, 0x56, 0x52, 0x09, 0xa1, 0x30, 0x35, 0x2c, 0x2c, 0x11, 0x55, 0x22, 0x90, 0x40, 0x48, 0xd5,
	0x39, 0x76, 0x1c, 0x4b, 0xb1, 0xcf, 0xf2, 0x5d, 0xa2, 0x66, 0x45, 0x4c, 0x4c, 0xfc, 0x0c, 0x60,
	0xea, 0xc0, 0x8f, 0x28, 0x62, 0xa9, 0x98, 0x98, 0x10, 0x4a, 0x86, 0xfe, 0x0d, 0xe4, 0x3b, 0xfb,
	0xe2, 0x73, 0x52, 0xa2, 0xb2, 0x24, 0xb9, 0xef, 0x7b, 0xdf, 0xf3, 0x7b, 0x79, 0xf7, 0x25, 0xe0,
	0x7e, 0xcf, 0x71, 0x6c, 0x6c, 0x8e, 0x6a, 0x96, 0x43, 0x60, 0xcd, 0x24, 0x27, 0x46, 0x18, 0x21,
	0x82, 0x94, 0x75, 0x5a, 0x37, 0x92, 0xba, 0xb6, 0xe9, 0x22, 0x17, 0xd1, 0x8e, 0x19, 0x7f, 0x62,
	0x20, 0xad, 0x24, 0x0e, 0xb3, 0x11, 0xd6, 0xd2, 0xc4, 0x56, 0x08, 0x23, 0xe8, 0xa7, 0xbd, 0x52,
	0x17, 0x61, 0x1f, 0xe1, 0x63, 0xc6, 0xc7, 0x0e, 0x49, 0x6b, 0x9b, 0x9d, 0x4c, 0x1f, 0xbb, 0xe6,
	0xa8, 0x16, 0xbf, 0x25, 0x8d, 0x0d, 0xe8, 0x7b, 0x01, 0x32, 0xe9, 0x2b, 0x2b, 0x55, 0xbe, 0x4a,
	0xe0, 0x6e, 0x0b, 0xbb, 0xaf, 0x42, 0x1b, 0x12, 0xa7, 0x33, 0xf6, 0x2d, 0x34, 0xc0, 0x8a, 0x01,
	0xae, 0x43, 0xdb, 0xf7, 0x02, 0x55, 0x2a, 0x4b, 0x55, 0xb9, 0xa9, 0xfe, 0xfc, 0xf6, 0x78, 0x33,
	0x79, 0xc2, 0xa1, 0x6d, 0x47, 0x0e, 0xc6, 0x1d, 0x12, 0x79, 0x81, 0xdb, 0x66, 0x30, 0xe5, 0x19,
	0xb8, 0x81, 0xd9, 0xa8, 0xba, 0x52, 0x2e, 0x56, 0xd7, 0xea, 0x3b, 0x86, 0xe0, 0xdc, 0xc8, 0xd2,
	0x37, 0xaf, 0x9d, 0xfd, 0xde, 0x2d, 0xb4, 0xd3, 0x89, 0xc6, 0xa3, 0xf7, 0x17, 0xa7, 0xfb, 0x32,
	0x1c, 0x92, 0x3e, 0x8a, 0x3c, 0x32, 0xfe, 0x78, 0x71, 0xba, 0x9f, 0x7c, 0x9f, 0x79, 0x5d, 0x15,
	0x0d, 0xa8, 0xf9, 0x5a, 0xdb, 0xc1, 0x21, 0x0a, 0xb0, 0x53, 0xf9, 0xc0, 0x8c, 0xb4, 0x1d, 0x1f,
	0x8d, 0xfe, 0xdb, 0x88, 0x2a, 0x1a, 0x91, 0x67, 0x2a, 0xf7, 0xe6, 0x55, 0xde, 0xe3, 0x2a, 0x0f,
	0x6d, 0x5b, 0x94, 0x28, 0xa8, 0xe0, 0x12, 0x7f, 0x48, 0xe0, 0x4e, 0x0b, 0xbb, 0x9d, 0xa1, 0xe5,
	0x7b, 0xe4, 0x28, 0xf2, 0xba, 0x0e, 0x56, 0x9e, 0x00, 0x79, 0x04, 0x07, 0x9e, 0x0d, 0x09, 0x8a,
	0x96, 0xaa, 0x9c, 0x41, 0x95, 0x07, 0x40, 0x26, 0x9e, 0xef, 0x60, 0x02, 0xfd, 0x50, 0x5d, 0x29,
	0x4b, 0xd5, 0x62, 0x7b, 0x56, 0x50, 0x9e, 0x82, 0xd5, 0x90, 0xf2, 0xab, 0x45, 0x9a, 0x87, 0x96,
	0xcb, 0x23, 0x23, 0x21, 0x89, 0x23, 0xc1, 0x37, 0xaa, 0xd4, 0x27, 0x7f, 0x4e, 0xec, 0x73, 0x8b,
	0xfb, 0xcc, 0x2a, 0xaf, 0x94, 0xc0, 0x76, 0xae, 0xc4, 0x8d, 0x7e, 0x91, 0xc0, 0x06, 0x0f, 0xea,
	0x65, 0xaf, 0xf7, 0xbc, 0x0f, 0xbd, 0xe0, 0xca, 0x61, 0x34, 0x80, 0x8c, 0x7a, 0xbd, 0xe3, 0x6e,
	0x3c, 0x4c, 0x2d, 0xae, 0xd5, 0xb7, 0x73, 0x3e, 0x52, 0xee, 0xc4, 0xc4, 0x4d, 0x94, 0x9c, 0x13,
	0x1b, 0x42, 0x5c, 0x5b, 0xb9, 0x4b, 0x75, 0x44, 0xb7, 0xa9, 0xb2, 0x03, 0x4a, 0x73, 0x52, 0xb9,
	0x91, 0xcf, 0x2c, 0xb1, 0xec, 0x40, 0x9c, 0x18, 0xe7, 0x5d, 0x9e, 0x18, 0x87, 0x2a, 0x07, 0x60,
	0x95, 0x2d, 0x70, 0xe2, 0x65, 0x2b, 0xe7, 0x85, 0xd1, 0xf3, 0x38, 0xe8, 0xe9, 0x0a, 0x3e, 0x58,
	0x1c, 0xd9, 0x52, 0xea, 0xa2, 0xfe, 0xbd, 0x08, 0x8a, 0x2d, 0xec, 0x2a, 0x6f, 0xc0, 0xba, 0xb8,
	0xe7, 0xbb, 0x39, 0x09, 0xf9, 0xe5, 0xd2, 0x1e, 0x2e, 0x01, 0xa4, 0x8f, 0x88, 0xa9, 0xc5, 0xcd,
	0x5b, 0x40, 0x2d, 0x00, 0x16, 0x51, 0x2f, 0xdc, 0x1a, 0xe5, 0x35, 0xb8, 0x25, 0x6c, 0x8c, 0x3e,
	0x3f, 0x98, 0xed, 0x6b, 0x7b, 0xff, 0xee, 0x73, 0xde, 0x77, 0xe0, 0x76, 0xee, 0x82, 0x96, 0x2f,
	0x73, 0x9b, 0x22, 0xb4, 0xea, 0x32, 0x44, 0x56, 0xb5, 0x70, 0x6b, 0xf4, 0xcb, 0x26, 0x59, 0x7f,
	0x91, 0xea, 0x45, 0x59, 0x36, 0x5f, 0x9c, 0x4d, 0x74, 0xe9, 0x7c, 0xa2, 0x4b, 0x7f, 0x26, 0xba,
	0xf4, 0x69, 0xaa, 0x17, 0xce, 0xa7, 0x7a, 0xe1, 0xd7, 0x54, 0x2f, 0xbc, 0x35, 0x5c, 0x8f, 0xf4,
	0x87, 0x96, 0xd1, 0x45, 0xbe, 0x69, 0xc1, 0xc0, 0xa6, 0xbf, 0xef, 0x5d, 0x34, 0x30, 0xe9, 0x02,
	0x99, 0xa3, 0xba, 0x79, 0xc2, 0xfe, 0x5c, 0x4c, 0x32, 0x0e, 0x1d, 0x6c, 0xad, 0x52, 0xc0, 0xc1,
	0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xe8, 0x52, 0x35, 0xbd, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RPC method to update symbols
	UpdateSymbols(ctx context.Context, in *MsgUpdateSymbols, opts ...grpc.CallOption) (*MsgUpdateSymbolsResponse, error)
	// RPC method to remove symbols
	RemoveSymbols(ctx context.Context, in *MsgRemoveSymbols, opts ...grpc.CallOption) (*MsgRemoveSymbolsResponse, error)
	// RPC method to submit prices
	SubmitPrices(ctx context.Context, in *MsgSubmitPrices, opts ...grpc.CallOption) (*MsgSubmitPricesResponse, error)
	// RPC method to update off-chain information
	UpdateOffChain(ctx context.Context, in *MsgUpdateOffChain, opts ...grpc.CallOption) (*MsgUpdateOffChainResponse, error)
	// RPC method to update parameters
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateSymbols(ctx context.Context, in *MsgUpdateSymbols, opts ...grpc.CallOption) (*MsgUpdateSymbolsResponse, error) {
	out := new(MsgUpdateSymbolsResponse)
	err := c.cc.Invoke(ctx, "/feeds.v1beta1.Msg/UpdateSymbols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveSymbols(ctx context.Context, in *MsgRemoveSymbols, opts ...grpc.CallOption) (*MsgRemoveSymbolsResponse, error) {
	out := new(MsgRemoveSymbolsResponse)
	err := c.cc.Invoke(ctx, "/feeds.v1beta1.Msg/RemoveSymbols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitPrices(ctx context.Context, in *MsgSubmitPrices, opts ...grpc.CallOption) (*MsgSubmitPricesResponse, error) {
	out := new(MsgSubmitPricesResponse)
	err := c.cc.Invoke(ctx, "/feeds.v1beta1.Msg/SubmitPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateOffChain(ctx context.Context, in *MsgUpdateOffChain, opts ...grpc.CallOption) (*MsgUpdateOffChainResponse, error) {
	out := new(MsgUpdateOffChainResponse)
	err := c.cc.Invoke(ctx, "/feeds.v1beta1.Msg/UpdateOffChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/feeds.v1beta1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RPC method to update symbols
	UpdateSymbols(context.Context, *MsgUpdateSymbols) (*MsgUpdateSymbolsResponse, error)
	// RPC method to remove symbols
	RemoveSymbols(context.Context, *MsgRemoveSymbols) (*MsgRemoveSymbolsResponse, error)
	// RPC method to submit prices
	SubmitPrices(context.Context, *MsgSubmitPrices) (*MsgSubmitPricesResponse, error)
	// RPC method to update off-chain information
	UpdateOffChain(context.Context, *MsgUpdateOffChain) (*MsgUpdateOffChainResponse, error)
	// RPC method to update parameters
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateSymbols(ctx context.Context, req *MsgUpdateSymbols) (*MsgUpdateSymbolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSymbols not implemented")
}
func (*UnimplementedMsgServer) RemoveSymbols(ctx context.Context, req *MsgRemoveSymbols) (*MsgRemoveSymbolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSymbols not implemented")
}
func (*UnimplementedMsgServer) SubmitPrices(ctx context.Context, req *MsgSubmitPrices) (*MsgSubmitPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPrices not implemented")
}
func (*UnimplementedMsgServer) UpdateOffChain(ctx context.Context, req *MsgUpdateOffChain) (*MsgUpdateOffChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOffChain not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSymbols)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeds.v1beta1.Msg/UpdateSymbols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSymbols(ctx, req.(*MsgUpdateSymbols))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveSymbols)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeds.v1beta1.Msg/RemoveSymbols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveSymbols(ctx, req.(*MsgRemoveSymbols))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitPrices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeds.v1beta1.Msg/SubmitPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitPrices(ctx, req.(*MsgSubmitPrices))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateOffChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateOffChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateOffChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeds.v1beta1.Msg/UpdateOffChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateOffChain(ctx, req.(*MsgUpdateOffChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeds.v1beta1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "feeds.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateSymbols",
			Handler:    _Msg_UpdateSymbols_Handler,
		},
		{
			MethodName: "RemoveSymbols",
			Handler:    _Msg_RemoveSymbols_Handler,
		},
		{
			MethodName: "SubmitPrices",
			Handler:    _Msg_SubmitPrices_Handler,
		},
		{
			MethodName: "UpdateOffChain",
			Handler:    _Msg_UpdateOffChain_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feeds/v1beta1/tx.proto",
}

func (m *MsgUpdateSymbols) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSymbols) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSymbols) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbols) > 0 {
		for iNdEx := len(m.Symbols) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Symbols[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSymbolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSymbolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSymbolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveSymbols) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveSymbols) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveSymbols) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbols) > 0 {
		for iNdEx := len(m.Symbols) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Symbols[iNdEx])
			copy(dAtA[i:], m.Symbols[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Symbols[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveSymbolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveSymbolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveSymbolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPrices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPrices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPrices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Timestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOffChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOffChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOffChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OffChain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOffChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOffChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOffChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateSymbols) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Symbols) > 0 {
		for _, e := range m.Symbols {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateSymbolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveSymbols) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Symbols) > 0 {
		for _, s := range m.Symbols {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRemoveSymbolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitPrices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTx(uint64(m.Timestamp))
	}
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateOffChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.OffChain.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateOffChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateSymbols) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSymbols: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSymbols: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbols", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbols = append(m.Symbols, UpdateSymbol{})
			if err := m.Symbols[len(m.Symbols)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSymbolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSymbolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSymbolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveSymbols) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveSymbols: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveSymbols: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbols = append(m.Symbols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveSymbolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveSymbolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveSymbolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPrices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPrices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPrices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, SubmitPrice{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOffChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOffChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOffChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OffChain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOffChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOffChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOffChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
