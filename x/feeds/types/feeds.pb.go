// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: feeds/v1beta1/feeds.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PriceStatus is a structure that defines the price status of a price.
type PriceStatus int32

const (
	// PRICE_STATUS_UNSPECIFIED is an unspecified price status.
	PriceStatusUnspecified PriceStatus = 0
	// PRICE_STATUS_UNSUPPORTED is an unsupported price status.
	PriceStatusUnsupported PriceStatus = 1
	// PRICE_STATUS_UNAVAILABLE is an unavailable price status.
	PriceStatusUnavailable PriceStatus = 2
	// PRICE_STATUS_AVAILABLE is an available price status.
	PriceStatusAvailable PriceStatus = 3
)

var PriceStatus_name = map[int32]string{
	0: "PRICE_STATUS_UNSPECIFIED",
	1: "PRICE_STATUS_UNSUPPORTED",
	2: "PRICE_STATUS_UNAVAILABLE",
	3: "PRICE_STATUS_AVAILABLE",
}

var PriceStatus_value = map[string]int32{
	"PRICE_STATUS_UNSPECIFIED": 0,
	"PRICE_STATUS_UNSUPPORTED": 1,
	"PRICE_STATUS_UNAVAILABLE": 2,
	"PRICE_STATUS_AVAILABLE":   3,
}

func (x PriceStatus) String() string {
	return proto.EnumName(PriceStatus_name, int32(x))
}

func (PriceStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{0}
}

// Signal is the data structure that contains signal id and power of that signal.
type Signal struct {
	// ID is the id of the signal.
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Power is the power of the corresponding signal id.
	Power int64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *Signal) Reset()         { *m = Signal{} }
func (m *Signal) String() string { return proto.CompactTextString(m) }
func (*Signal) ProtoMessage()    {}
func (*Signal) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{0}
}
func (m *Signal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signal.Merge(m, src)
}
func (m *Signal) XXX_Size() int {
	return m.Size()
}
func (m *Signal) XXX_DiscardUnknown() {
	xxx_messageInfo_Signal.DiscardUnknown(m)
}

var xxx_messageInfo_Signal proto.InternalMessageInfo

func (m *Signal) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Signal) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

// DelegatorSignals is the data structure that contains array of signals of a delegator.
type DelegatorSignals struct {
	// Delegator is the address of the delegator of this signals.
	Delegator string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	// Signals is a list of signals submit by the delegator.
	Signals []Signal `protobuf:"bytes,2,rep,name=signals,proto3" json:"signals"`
}

func (m *DelegatorSignals) Reset()         { *m = DelegatorSignals{} }
func (m *DelegatorSignals) String() string { return proto.CompactTextString(m) }
func (*DelegatorSignals) ProtoMessage()    {}
func (*DelegatorSignals) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{1}
}
func (m *DelegatorSignals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorSignals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorSignals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorSignals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorSignals.Merge(m, src)
}
func (m *DelegatorSignals) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorSignals) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorSignals.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorSignals proto.InternalMessageInfo

func (m *DelegatorSignals) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *DelegatorSignals) GetSignals() []Signal {
	if m != nil {
		return m.Signals
	}
	return nil
}

// Feed is a structure that holds a signal id, its total power, and its calculated interval.
type Feed struct {
	// SignalID is the unique string that identifies the unit of feed.
	SignalID string `protobuf:"bytes,1,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	// Interval is the interval of the price feed.
	Interval int64 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// DeviationInThousandth is the maximum deviation value the feed can tolerate, expressed in thousandths.
	DeviationInThousandth int64 `protobuf:"varint,3,opt,name=deviation_in_thousandth,json=deviationInThousandth,proto3" json:"deviation_in_thousandth,omitempty"`
}

func (m *Feed) Reset()         { *m = Feed{} }
func (m *Feed) String() string { return proto.CompactTextString(m) }
func (*Feed) ProtoMessage()    {}
func (*Feed) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{2}
}
func (m *Feed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Feed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Feed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Feed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feed.Merge(m, src)
}
func (m *Feed) XXX_Size() int {
	return m.Size()
}
func (m *Feed) XXX_DiscardUnknown() {
	xxx_messageInfo_Feed.DiscardUnknown(m)
}

var xxx_messageInfo_Feed proto.InternalMessageInfo

func (m *Feed) GetSignalID() string {
	if m != nil {
		return m.SignalID
	}
	return ""
}

func (m *Feed) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *Feed) GetDeviationInThousandth() int64 {
	if m != nil {
		return m.DeviationInThousandth
	}
	return 0
}

// SupportedFeeds is a structure that holds a list of currently supported feeds, and its last update time and block.
type SupportedFeeds struct {
	// Feed is a list of currently suppored feeds.
	Feeds []Feed `protobuf:"bytes,1,rep,name=feeds,proto3" json:"feeds"`
	// LastUpdateTimestamp is the timestamp of the last time supported feeds list is updated.
	LastUpdateTimestamp int64 `protobuf:"varint,2,opt,name=last_update_timestamp,json=lastUpdateTimestamp,proto3" json:"last_update_timestamp,omitempty"`
	// LastUpdateBlock is the number of blocks of the last time supported feeds list is updated.
	LastUpdateBlock int64 `protobuf:"varint,3,opt,name=last_update_block,json=lastUpdateBlock,proto3" json:"last_update_block,omitempty"`
}

func (m *SupportedFeeds) Reset()         { *m = SupportedFeeds{} }
func (m *SupportedFeeds) String() string { return proto.CompactTextString(m) }
func (*SupportedFeeds) ProtoMessage()    {}
func (*SupportedFeeds) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{3}
}
func (m *SupportedFeeds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupportedFeeds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupportedFeeds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupportedFeeds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupportedFeeds.Merge(m, src)
}
func (m *SupportedFeeds) XXX_Size() int {
	return m.Size()
}
func (m *SupportedFeeds) XXX_DiscardUnknown() {
	xxx_messageInfo_SupportedFeeds.DiscardUnknown(m)
}

var xxx_messageInfo_SupportedFeeds proto.InternalMessageInfo

func (m *SupportedFeeds) GetFeeds() []Feed {
	if m != nil {
		return m.Feeds
	}
	return nil
}

func (m *SupportedFeeds) GetLastUpdateTimestamp() int64 {
	if m != nil {
		return m.LastUpdateTimestamp
	}
	return 0
}

func (m *SupportedFeeds) GetLastUpdateBlock() int64 {
	if m != nil {
		return m.LastUpdateBlock
	}
	return 0
}

// Price is a structure that defines the price of a signal id.
type Price struct {
	// PriceStatus is the price status of a signal id.
	PriceStatus PriceStatus `protobuf:"varint,1,opt,name=price_status,json=priceStatus,proto3,enum=feeds.v1beta1.PriceStatus" json:"price_status,omitempty"`
	// SignalID is the signal id of the price.
	SignalID string `protobuf:"bytes,2,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	// Price is the price of the signal id.
	Price uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	// Timestamp is the timestamp at which the price was aggregated.
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Price) Reset()         { *m = Price{} }
func (m *Price) String() string { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()    {}
func (*Price) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{4}
}
func (m *Price) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Price) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Price.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Price) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Price.Merge(m, src)
}
func (m *Price) XXX_Size() int {
	return m.Size()
}
func (m *Price) XXX_DiscardUnknown() {
	xxx_messageInfo_Price.DiscardUnknown(m)
}

var xxx_messageInfo_Price proto.InternalMessageInfo

func (m *Price) GetPriceStatus() PriceStatus {
	if m != nil {
		return m.PriceStatus
	}
	return PriceStatusUnspecified
}

func (m *Price) GetSignalID() string {
	if m != nil {
		return m.SignalID
	}
	return ""
}

func (m *Price) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Price) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// SubmitPrice is a structure that defines the submit price of a signal id.
type SubmitPrice struct {
	// PriceStatus is the price status of a signal id.
	PriceStatus PriceStatus `protobuf:"varint,1,opt,name=price_status,json=priceStatus,proto3,enum=feeds.v1beta1.PriceStatus" json:"price_status,omitempty"`
	// SignalID is the signal id of the price.
	SignalID string `protobuf:"bytes,2,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	// Price is the price submitted by the validator.
	Price uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *SubmitPrice) Reset()         { *m = SubmitPrice{} }
func (m *SubmitPrice) String() string { return proto.CompactTextString(m) }
func (*SubmitPrice) ProtoMessage()    {}
func (*SubmitPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{5}
}
func (m *SubmitPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitPrice.Merge(m, src)
}
func (m *SubmitPrice) XXX_Size() int {
	return m.Size()
}
func (m *SubmitPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitPrice.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitPrice proto.InternalMessageInfo

func (m *SubmitPrice) GetPriceStatus() PriceStatus {
	if m != nil {
		return m.PriceStatus
	}
	return PriceStatusUnspecified
}

func (m *SubmitPrice) GetSignalID() string {
	if m != nil {
		return m.SignalID
	}
	return ""
}

func (m *SubmitPrice) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

// ValidatorPrice is a structure that defines the price submitted by a validator for a signal id.
type ValidatorPrice struct {
	// PriceStatus is the price status of a price submitted.
	PriceStatus PriceStatus `protobuf:"varint,1,opt,name=price_status,json=priceStatus,proto3,enum=feeds.v1beta1.PriceStatus" json:"price_status,omitempty"`
	// Validator is the validator address.
	Validator string `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	// SignalID is the signal id of the price.
	SignalID string `protobuf:"bytes,3,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	// Price is the price submitted by the validator.
	Price uint64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	// Timestamp is the timestamp at which the price was submitted.
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// BlockHeight is the block height at which the price was submitted.
	BlockHeight int64 `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *ValidatorPrice) Reset()         { *m = ValidatorPrice{} }
func (m *ValidatorPrice) String() string { return proto.CompactTextString(m) }
func (*ValidatorPrice) ProtoMessage()    {}
func (*ValidatorPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{6}
}
func (m *ValidatorPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorPrice.Merge(m, src)
}
func (m *ValidatorPrice) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorPrice.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorPrice proto.InternalMessageInfo

func (m *ValidatorPrice) GetPriceStatus() PriceStatus {
	if m != nil {
		return m.PriceStatus
	}
	return PriceStatusUnspecified
}

func (m *ValidatorPrice) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *ValidatorPrice) GetSignalID() string {
	if m != nil {
		return m.SignalID
	}
	return ""
}

func (m *ValidatorPrice) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ValidatorPrice) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ValidatorPrice) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// PriceService is a structure that defines the information of price service.
type PriceService struct {
	// Hash is the hash of the price service.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Version is the version of the price service.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Url is the URL of the price service.
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *PriceService) Reset()         { *m = PriceService{} }
func (m *PriceService) String() string { return proto.CompactTextString(m) }
func (*PriceService) ProtoMessage()    {}
func (*PriceService) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{7}
}
func (m *PriceService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceService.Merge(m, src)
}
func (m *PriceService) XXX_Size() int {
	return m.Size()
}
func (m *PriceService) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceService.DiscardUnknown(m)
}

var xxx_messageInfo_PriceService proto.InternalMessageInfo

func (m *PriceService) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *PriceService) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PriceService) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterEnum("feeds.v1beta1.PriceStatus", PriceStatus_name, PriceStatus_value)
	proto.RegisterType((*Signal)(nil), "feeds.v1beta1.Signal")
	proto.RegisterType((*DelegatorSignals)(nil), "feeds.v1beta1.DelegatorSignals")
	proto.RegisterType((*Feed)(nil), "feeds.v1beta1.Feed")
	proto.RegisterType((*SupportedFeeds)(nil), "feeds.v1beta1.SupportedFeeds")
	proto.RegisterType((*Price)(nil), "feeds.v1beta1.Price")
	proto.RegisterType((*SubmitPrice)(nil), "feeds.v1beta1.SubmitPrice")
	proto.RegisterType((*ValidatorPrice)(nil), "feeds.v1beta1.ValidatorPrice")
	proto.RegisterType((*PriceService)(nil), "feeds.v1beta1.PriceService")
}

func init() { proto.RegisterFile("feeds/v1beta1/feeds.proto", fileDescriptor_4b338829e148e6ea) }

var fileDescriptor_4b338829e148e6ea = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x3f, 0x6f, 0xfb, 0x44,
	0x18, 0xce, 0x25, 0x4e, 0x7e, 0xcd, 0x25, 0x94, 0x70, 0xbf, 0xb4, 0xb8, 0x56, 0x95, 0x84, 0x4e,
	0xa5, 0x12, 0xb1, 0x1a, 0xa0, 0x42, 0x08, 0x86, 0xa4, 0x49, 0x55, 0x4b, 0x15, 0x44, 0x76, 0xd2,
	0x81, 0xc5, 0xba, 0xc4, 0xd7, 0xf8, 0x84, 0x63, 0x5b, 0xbe, 0x8b, 0x81, 0x4f, 0x00, 0x2a, 0x0b,
	0x12, 0x73, 0x25, 0x24, 0x06, 0x06, 0x56, 0x3e, 0x44, 0xc7, 0x8a, 0x89, 0xa9, 0x42, 0xe9, 0xc2,
	0x17, 0x40, 0xac, 0xc8, 0x77, 0xce, 0xbf, 0x2a, 0x20, 0x06, 0x86, 0xdf, 0x76, 0xef, 0xfb, 0x3c,
	0xcf, 0x9b, 0xe7, 0x79, 0x75, 0x17, 0xc3, 0x83, 0x1b, 0x42, 0x1c, 0xa6, 0xc7, 0xa7, 0x23, 0xc2,
	0xf1, 0xa9, 0x2e, 0xaa, 0x66, 0x18, 0x05, 0x3c, 0x40, 0xaf, 0xc9, 0x22, 0x85, 0xb4, 0x83, 0x71,
	0xc0, 0xa6, 0x01, 0xb3, 0x05, 0xa8, 0xcb, 0x42, 0x32, 0xb5, 0xea, 0x24, 0x98, 0x04, 0xb2, 0x9f,
	0x9c, 0x64, 0xf7, 0xe8, 0x23, 0x58, 0xb0, 0xe8, 0xc4, 0xc7, 0x1e, 0xda, 0x87, 0x59, 0xea, 0xa8,
	0xa0, 0x01, 0x8e, 0x8b, 0x9d, 0xc2, 0xfc, 0xb1, 0x9e, 0x35, 0xba, 0x66, 0x96, 0x3a, 0xa8, 0x0a,
	0xf3, 0x61, 0xf0, 0x05, 0x89, 0xd4, 0x6c, 0x03, 0x1c, 0xe7, 0x4c, 0x59, 0x7c, 0xa8, 0xfc, 0xf1,
	0x43, 0x1d, 0x1c, 0x7d, 0x0d, 0x60, 0xa5, 0x4b, 0x3c, 0x32, 0xc1, 0x3c, 0x88, 0xe4, 0x1c, 0x86,
	0xce, 0x60, 0xd1, 0x59, 0xf4, 0xd2, 0x79, 0xea, 0xaf, 0xbf, 0xbc, 0x53, 0x4d, 0xdd, 0xb4, 0x1d,
	0x27, 0x22, 0x8c, 0x59, 0x3c, 0xa2, 0xfe, 0xc4, 0x5c, 0x51, 0xd1, 0xfb, 0xf0, 0x05, 0x93, 0x23,
	0xd4, 0x6c, 0x23, 0x77, 0x5c, 0x6a, 0xed, 0x35, 0x37, 0xc2, 0x35, 0xe5, 0x0f, 0x74, 0x94, 0xfb,
	0xc7, 0x7a, 0xc6, 0x5c, 0x70, 0x53, 0x27, 0xdf, 0x02, 0xa8, 0x5c, 0x10, 0xe2, 0xa0, 0xb7, 0x61,
	0x51, 0x22, 0xf6, 0x32, 0x4d, 0x79, 0xfe, 0x58, 0xdf, 0x91, 0x62, 0xa3, 0x6b, 0xee, 0x48, 0xd8,
	0x70, 0x90, 0x06, 0x77, 0xa8, 0xcf, 0x49, 0x14, 0x63, 0x2f, 0x0d, 0xb7, 0xac, 0xd1, 0x19, 0x7c,
	0xd3, 0x21, 0x31, 0xc5, 0x9c, 0x06, 0xbe, 0x4d, 0x7d, 0x9b, 0xbb, 0xc1, 0x8c, 0x61, 0xdf, 0xe1,
	0xae, 0x9a, 0x13, 0xd4, 0xbd, 0x25, 0x6c, 0xf8, 0x83, 0x25, 0x98, 0xba, 0xf9, 0x09, 0xc0, 0x5d,
	0x6b, 0x16, 0x86, 0x41, 0xc4, 0x89, 0x93, 0xd8, 0x62, 0x48, 0x87, 0x79, 0x91, 0x46, 0x05, 0x22,
	0xdb, 0xcb, 0x67, 0xd9, 0x12, 0x52, 0x9a, 0x4c, 0xf2, 0x50, 0x0b, 0xee, 0x79, 0x98, 0x71, 0x7b,
	0x16, 0x3a, 0x98, 0x13, 0x9b, 0xd3, 0x29, 0x61, 0x1c, 0x4f, 0xc3, 0xd4, 0xea, 0xcb, 0x04, 0x1c,
	0x0a, 0x6c, 0xb0, 0x80, 0xd0, 0x09, 0x7c, 0x63, 0x5d, 0x33, 0xf2, 0x82, 0xf1, 0xe7, 0xa9, 0xdf,
	0xd7, 0x57, 0xfc, 0x4e, 0xd2, 0x4e, 0x9d, 0xfe, 0x0c, 0x60, 0xbe, 0x1f, 0xd1, 0x31, 0x41, 0x1f,
	0xc3, 0x72, 0x98, 0x1c, 0x6c, 0xc6, 0x31, 0x9f, 0x31, 0xb1, 0xbb, 0xdd, 0x96, 0xf6, 0xcc, 0xa7,
	0xe0, 0x5a, 0x82, 0x61, 0x96, 0xc2, 0x55, 0xb1, 0xb9, 0xf7, 0xec, 0xbf, 0xee, 0x3d, 0xb9, 0x51,
	0x89, 0x52, 0x38, 0x53, 0x4c, 0x59, 0xa0, 0x43, 0x58, 0x5c, 0x65, 0x54, 0x84, 0xe7, 0x55, 0x23,
	0x75, 0xfb, 0x3d, 0x80, 0x25, 0x6b, 0x36, 0x9a, 0x52, 0xfe, 0x4a, 0x78, 0x4e, 0x5d, 0xfd, 0x09,
	0xe0, 0xee, 0x35, 0xf6, 0xa8, 0x93, 0x5c, 0xe3, 0xff, 0xc5, 0xd8, 0x21, 0x2c, 0xc6, 0x8b, 0x81,
	0xd2, 0x98, 0xb9, 0x6a, 0x6c, 0xda, 0xce, 0xfd, 0x37, 0xdb, 0xca, 0x3f, 0xae, 0x3a, 0xff, 0x6c,
	0xd5, 0xe8, 0x2d, 0x58, 0x16, 0x17, 0xc7, 0x76, 0x09, 0x9d, 0xb8, 0x5c, 0x2d, 0x08, 0x42, 0x49,
	0xf4, 0x2e, 0x45, 0x2b, 0xcd, 0x3d, 0x80, 0x65, 0x99, 0x80, 0x44, 0x71, 0x32, 0x16, 0x41, 0xc5,
	0xc5, 0xcc, 0x95, 0xaf, 0xce, 0x14, 0x67, 0xa4, 0xc2, 0x17, 0x31, 0x89, 0x18, 0x0d, 0xfc, 0x34,
	0xc7, 0xa2, 0x44, 0x15, 0x98, 0x9b, 0x45, 0x9e, 0xf4, 0x6f, 0x26, 0x47, 0x39, 0xf5, 0xe4, 0x2f,
	0x00, 0x4b, 0x6b, 0x8b, 0x41, 0x1f, 0x40, 0xb5, 0x6f, 0x1a, 0xe7, 0x3d, 0xdb, 0x1a, 0xb4, 0x07,
	0x43, 0xcb, 0x1e, 0x7e, 0x62, 0xf5, 0x7b, 0xe7, 0xc6, 0x85, 0xd1, 0xeb, 0x56, 0x32, 0x9a, 0x76,
	0x7b, 0xd7, 0xd8, 0x5f, 0xa3, 0x0f, 0x7d, 0x16, 0x92, 0x31, 0xbd, 0xa1, 0xc4, 0xd9, 0xa6, 0x1c,
	0xf6, 0xfb, 0x9f, 0x9a, 0x83, 0x5e, 0xb7, 0x02, 0xb6, 0x29, 0x17, 0x2f, 0x76, 0x8b, 0xb2, 0x7d,
	0xdd, 0x36, 0xae, 0xda, 0x9d, 0xab, 0x5e, 0x25, 0xbb, 0x45, 0x89, 0x63, 0x4c, 0x3d, 0x3c, 0xf2,
	0x08, 0x7a, 0x0f, 0xee, 0x6f, 0x28, 0x57, 0xba, 0x9c, 0xa6, 0xde, 0xde, 0x35, 0xaa, 0x6b, 0xba,
	0xf6, 0x42, 0xa5, 0x29, 0xdf, 0xfc, 0x58, 0xcb, 0x74, 0x2e, 0xef, 0xe7, 0x35, 0xf0, 0x30, 0xaf,
	0x81, 0xdf, 0xe7, 0x35, 0xf0, 0xdd, 0x53, 0x2d, 0xf3, 0xf0, 0x54, 0xcb, 0xfc, 0xf6, 0x54, 0xcb,
	0x7c, 0xd6, 0x9c, 0x50, 0xee, 0xce, 0x46, 0xcd, 0x71, 0x30, 0xd5, 0x47, 0xd8, 0x77, 0xc4, 0x7f,
	0xf7, 0x38, 0xf0, 0xf4, 0xb1, 0x8b, 0xa9, 0xaf, 0xc7, 0x2d, 0xfd, 0x4b, 0xf9, 0x55, 0xd0, 0xf9,
	0x57, 0x21, 0x61, 0xa3, 0x82, 0x20, 0xbc, 0xfb, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x83, 0x3b,
	0x22, 0xb5, 0x39, 0x06, 0x00, 0x00,
}

func (this *Signal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Signal)
	if !ok {
		that2, ok := that.(Signal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	return true
}
func (this *DelegatorSignals) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegatorSignals)
	if !ok {
		that2, ok := that.(DelegatorSignals)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Delegator != that1.Delegator {
		return false
	}
	if len(this.Signals) != len(that1.Signals) {
		return false
	}
	for i := range this.Signals {
		if !this.Signals[i].Equal(&that1.Signals[i]) {
			return false
		}
	}
	return true
}
func (this *Feed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feed)
	if !ok {
		that2, ok := that.(Feed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignalID != that1.SignalID {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.DeviationInThousandth != that1.DeviationInThousandth {
		return false
	}
	return true
}
func (this *SupportedFeeds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SupportedFeeds)
	if !ok {
		that2, ok := that.(SupportedFeeds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Feeds) != len(that1.Feeds) {
		return false
	}
	for i := range this.Feeds {
		if !this.Feeds[i].Equal(&that1.Feeds[i]) {
			return false
		}
	}
	if this.LastUpdateTimestamp != that1.LastUpdateTimestamp {
		return false
	}
	if this.LastUpdateBlock != that1.LastUpdateBlock {
		return false
	}
	return true
}
func (this *Price) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Price)
	if !ok {
		that2, ok := that.(Price)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PriceStatus != that1.PriceStatus {
		return false
	}
	if this.SignalID != that1.SignalID {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *SubmitPrice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmitPrice)
	if !ok {
		that2, ok := that.(SubmitPrice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PriceStatus != that1.PriceStatus {
		return false
	}
	if this.SignalID != that1.SignalID {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	return true
}
func (this *ValidatorPrice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorPrice)
	if !ok {
		that2, ok := that.(ValidatorPrice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PriceStatus != that1.PriceStatus {
		return false
	}
	if this.Validator != that1.Validator {
		return false
	}
	if this.SignalID != that1.SignalID {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	return true
}
func (this *PriceService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PriceService)
	if !ok {
		that2, ok := that.(PriceService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (m *Signal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorSignals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorSignals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorSignals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signals) > 0 {
		for iNdEx := len(m.Signals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFeeds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Feed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviationInThousandth != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.DeviationInThousandth))
		i--
		dAtA[i] = 0x18
	}
	if m.Interval != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SignalID) > 0 {
		i -= len(m.SignalID)
		copy(dAtA[i:], m.SignalID)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.SignalID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SupportedFeeds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupportedFeeds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupportedFeeds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUpdateBlock != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.LastUpdateBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.LastUpdateTimestamp != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.LastUpdateTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Feeds) > 0 {
		for iNdEx := len(m.Feeds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Feeds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFeeds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Price) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Price) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Price) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.Price != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SignalID) > 0 {
		i -= len(m.SignalID)
		copy(dAtA[i:], m.SignalID)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.SignalID)))
		i--
		dAtA[i] = 0x12
	}
	if m.PriceStatus != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.PriceStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubmitPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SignalID) > 0 {
		i -= len(m.SignalID)
		copy(dAtA[i:], m.SignalID)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.SignalID)))
		i--
		dAtA[i] = 0x12
	}
	if m.PriceStatus != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.PriceStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.Timestamp != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.Price != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SignalID) > 0 {
		i -= len(m.SignalID)
		copy(dAtA[i:], m.SignalID)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.SignalID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if m.PriceStatus != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.PriceStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PriceService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFeeds(dAtA []byte, offset int, v uint64) int {
	offset -= sovFeeds(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Signal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovFeeds(uint64(m.Power))
	}
	return n
}

func (m *DelegatorSignals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	if len(m.Signals) > 0 {
		for _, e := range m.Signals {
			l = e.Size()
			n += 1 + l + sovFeeds(uint64(l))
		}
	}
	return n
}

func (m *Feed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignalID)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	if m.Interval != 0 {
		n += 1 + sovFeeds(uint64(m.Interval))
	}
	if m.DeviationInThousandth != 0 {
		n += 1 + sovFeeds(uint64(m.DeviationInThousandth))
	}
	return n
}

func (m *SupportedFeeds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Feeds) > 0 {
		for _, e := range m.Feeds {
			l = e.Size()
			n += 1 + l + sovFeeds(uint64(l))
		}
	}
	if m.LastUpdateTimestamp != 0 {
		n += 1 + sovFeeds(uint64(m.LastUpdateTimestamp))
	}
	if m.LastUpdateBlock != 0 {
		n += 1 + sovFeeds(uint64(m.LastUpdateBlock))
	}
	return n
}

func (m *Price) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PriceStatus != 0 {
		n += 1 + sovFeeds(uint64(m.PriceStatus))
	}
	l = len(m.SignalID)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovFeeds(uint64(m.Price))
	}
	if m.Timestamp != 0 {
		n += 1 + sovFeeds(uint64(m.Timestamp))
	}
	return n
}

func (m *SubmitPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PriceStatus != 0 {
		n += 1 + sovFeeds(uint64(m.PriceStatus))
	}
	l = len(m.SignalID)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovFeeds(uint64(m.Price))
	}
	return n
}

func (m *ValidatorPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PriceStatus != 0 {
		n += 1 + sovFeeds(uint64(m.PriceStatus))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	l = len(m.SignalID)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovFeeds(uint64(m.Price))
	}
	if m.Timestamp != 0 {
		n += 1 + sovFeeds(uint64(m.Timestamp))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovFeeds(uint64(m.BlockHeight))
	}
	return n
}

func (m *PriceService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	return n
}

func sovFeeds(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFeeds(x uint64) (n int) {
	return sovFeeds(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Signal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorSignals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorSignals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorSignals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signals = append(m.Signals, Signal{})
			if err := m.Signals[len(m.Signals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviationInThousandth", wireType)
			}
			m.DeviationInThousandth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviationInThousandth |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupportedFeeds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupportedFeeds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupportedFeeds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeds = append(m.Feeds, Feed{})
			if err := m.Feeds[len(m.Feeds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTimestamp", wireType)
			}
			m.LastUpdateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdateTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateBlock", wireType)
			}
			m.LastUpdateBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdateBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Price) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Price: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Price: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceStatus", wireType)
			}
			m.PriceStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceStatus |= PriceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceStatus", wireType)
			}
			m.PriceStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceStatus |= PriceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceStatus", wireType)
			}
			m.PriceStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceStatus |= PriceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeeds(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFeeds
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFeeds
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFeeds
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFeeds        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeeds          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFeeds = fmt.Errorf("proto: unexpected end of group")
)
