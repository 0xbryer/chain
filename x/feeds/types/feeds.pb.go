// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: feeds/v1beta1/feeds.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PriceOption defines the price option of a price.
type PriceOption int32

const (
	// PRICE_OPTION_UNSPECIFIED defines an unspecified price option.
	PriceOptionUnspecified PriceOption = 0
	// PRICE_OPTION_UNSUPPORTED defines an unsupported price option.
	PriceOptionUnsupported PriceOption = 1
	// PRICE_OPTION_UNAVAILABLE defines an unavailable price option.
	PriceOptionUnavailable PriceOption = 2
	// PRICE_OPTION_AVAILABLE defines an available price option.
	PriceOptionAvailable PriceOption = 3
)

var PriceOption_name = map[int32]string{
	0: "PRICE_OPTION_UNSPECIFIED",
	1: "PRICE_OPTION_UNSUPPORTED",
	2: "PRICE_OPTION_UNAVAILABLE",
	3: "PRICE_OPTION_AVAILABLE",
}

var PriceOption_value = map[string]int32{
	"PRICE_OPTION_UNSPECIFIED": 0,
	"PRICE_OPTION_UNSUPPORTED": 1,
	"PRICE_OPTION_UNAVAILABLE": 2,
	"PRICE_OPTION_AVAILABLE":   3,
}

func (x PriceOption) String() string {
	return proto.EnumName(PriceOption_name, int32(x))
}

func (PriceOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{0}
}

// Signal contains signal id and power of that signal.
type Signal struct {
	// The id of the signal.
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The power of the corresponding signal id.
	Power uint64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *Signal) Reset()         { *m = Signal{} }
func (m *Signal) String() string { return proto.CompactTextString(m) }
func (*Signal) ProtoMessage()    {}
func (*Signal) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{0}
}
func (m *Signal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signal.Merge(m, src)
}
func (m *Signal) XXX_Size() int {
	return m.Size()
}
func (m *Signal) XXX_DiscardUnknown() {
	xxx_messageInfo_Signal.DiscardUnknown(m)
}

var xxx_messageInfo_Signal proto.InternalMessageInfo

func (m *Signal) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Signal) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

// DelegatorSignals contains array of signals of a delegator.
type DelegatorSignals struct {
	// The address of the delegator of this signals.
	Delegator string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	// Signals is a list of signals submit by the delegator.
	Signals []Signal `protobuf:"bytes,2,rep,name=signals,proto3" json:"signals"`
}

func (m *DelegatorSignals) Reset()         { *m = DelegatorSignals{} }
func (m *DelegatorSignals) String() string { return proto.CompactTextString(m) }
func (*DelegatorSignals) ProtoMessage()    {}
func (*DelegatorSignals) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{1}
}
func (m *DelegatorSignals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorSignals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorSignals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorSignals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorSignals.Merge(m, src)
}
func (m *DelegatorSignals) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorSignals) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorSignals.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorSignals proto.InternalMessageInfo

func (m *DelegatorSignals) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *DelegatorSignals) GetSignals() []Signal {
	if m != nil {
		return m.Signals
	}
	return nil
}

// Feed is a structure that holds a signal id, its total power, and its calculated interval.
type Feed struct {
	// The unique string that identifies the unit of feed.
	SignalID string `protobuf:"bytes,1,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	// The power of the signal id.
	Power uint64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
	// The interval of the price feed of the signal id.
	Interval int64 `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
	// The timestamp of the last time interval is updated.
	LastIntervalUpdateTimestamp int64 `protobuf:"varint,4,opt,name=last_interval_update_timestamp,json=lastIntervalUpdateTimestamp,proto3" json:"last_interval_update_timestamp,omitempty"`
	// The deviation_in_thousandth signifies the maximum deviation value, expressed in thousandths, that this price feed
	// can tolerate.
	DeviationInThousandth int64 `protobuf:"varint,5,opt,name=deviation_in_thousandth,json=deviationInThousandth,proto3" json:"deviation_in_thousandth,omitempty"`
}

func (m *Feed) Reset()         { *m = Feed{} }
func (m *Feed) String() string { return proto.CompactTextString(m) }
func (*Feed) ProtoMessage()    {}
func (*Feed) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{2}
}
func (m *Feed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Feed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Feed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Feed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feed.Merge(m, src)
}
func (m *Feed) XXX_Size() int {
	return m.Size()
}
func (m *Feed) XXX_DiscardUnknown() {
	xxx_messageInfo_Feed.DiscardUnknown(m)
}

var xxx_messageInfo_Feed proto.InternalMessageInfo

func (m *Feed) GetSignalID() string {
	if m != nil {
		return m.SignalID
	}
	return ""
}

func (m *Feed) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Feed) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *Feed) GetLastIntervalUpdateTimestamp() int64 {
	if m != nil {
		return m.LastIntervalUpdateTimestamp
	}
	return 0
}

func (m *Feed) GetDeviationInThousandth() int64 {
	if m != nil {
		return m.DeviationInThousandth
	}
	return 0
}

// Price defines the price of a signal id.
type Price struct {
	// PriceOption defines the price option of a signal id.
	PriceOption PriceOption `protobuf:"varint,1,opt,name=price_option,json=priceOption,proto3,enum=feeds.v1beta1.PriceOption" json:"price_option,omitempty"`
	// The signal id of the price.
	SignalID string `protobuf:"bytes,2,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	// The price of the signal id.
	Price uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	// The timestamp at which the price was aggregated.
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Price) Reset()         { *m = Price{} }
func (m *Price) String() string { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()    {}
func (*Price) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{3}
}
func (m *Price) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Price) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Price.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Price) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Price.Merge(m, src)
}
func (m *Price) XXX_Size() int {
	return m.Size()
}
func (m *Price) XXX_DiscardUnknown() {
	xxx_messageInfo_Price.DiscardUnknown(m)
}

var xxx_messageInfo_Price proto.InternalMessageInfo

func (m *Price) GetPriceOption() PriceOption {
	if m != nil {
		return m.PriceOption
	}
	return PriceOptionUnspecified
}

func (m *Price) GetSignalID() string {
	if m != nil {
		return m.SignalID
	}
	return ""
}

func (m *Price) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Price) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// SubmitPrice defines the submit price of a signal id.
type SubmitPrice struct {
	// PriceOption defines the price option of a signal id.
	PriceOption PriceOption `protobuf:"varint,1,opt,name=price_option,json=priceOption,proto3,enum=feeds.v1beta1.PriceOption" json:"price_option,omitempty"`
	// The signal id of the price.
	SignalID string `protobuf:"bytes,2,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	// The price submitted by the validator.
	Price uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *SubmitPrice) Reset()         { *m = SubmitPrice{} }
func (m *SubmitPrice) String() string { return proto.CompactTextString(m) }
func (*SubmitPrice) ProtoMessage()    {}
func (*SubmitPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{4}
}
func (m *SubmitPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitPrice.Merge(m, src)
}
func (m *SubmitPrice) XXX_Size() int {
	return m.Size()
}
func (m *SubmitPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitPrice.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitPrice proto.InternalMessageInfo

func (m *SubmitPrice) GetPriceOption() PriceOption {
	if m != nil {
		return m.PriceOption
	}
	return PriceOptionUnspecified
}

func (m *SubmitPrice) GetSignalID() string {
	if m != nil {
		return m.SignalID
	}
	return ""
}

func (m *SubmitPrice) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

// PriceValidator defines the price submitted by a validator for a signal id.
type PriceValidator struct {
	// PriceOption defines the price option of a price submitted.
	PriceOption PriceOption `protobuf:"varint,1,opt,name=price_option,json=priceOption,proto3,enum=feeds.v1beta1.PriceOption" json:"price_option,omitempty"`
	// The validator address.
	Validator string `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	// The signal id of the price.
	SignalID string `protobuf:"bytes,3,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	// The price submitted by the validator.
	Price uint64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	// The timestamp at which the price was submitted.
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The block height at which the price was submitted.
	BlockHeight int64 `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *PriceValidator) Reset()         { *m = PriceValidator{} }
func (m *PriceValidator) String() string { return proto.CompactTextString(m) }
func (*PriceValidator) ProtoMessage()    {}
func (*PriceValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{5}
}
func (m *PriceValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceValidator.Merge(m, src)
}
func (m *PriceValidator) XXX_Size() int {
	return m.Size()
}
func (m *PriceValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceValidator.DiscardUnknown(m)
}

var xxx_messageInfo_PriceValidator proto.InternalMessageInfo

func (m *PriceValidator) GetPriceOption() PriceOption {
	if m != nil {
		return m.PriceOption
	}
	return PriceOptionUnspecified
}

func (m *PriceValidator) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *PriceValidator) GetSignalID() string {
	if m != nil {
		return m.SignalID
	}
	return ""
}

func (m *PriceValidator) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *PriceValidator) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PriceValidator) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// PriceService defines the information of price service.
type PriceService struct {
	// The hash of the price service.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The version of the price service.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The URL of the price service.
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *PriceService) Reset()         { *m = PriceService{} }
func (m *PriceService) String() string { return proto.CompactTextString(m) }
func (*PriceService) ProtoMessage()    {}
func (*PriceService) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b338829e148e6ea, []int{6}
}
func (m *PriceService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceService.Merge(m, src)
}
func (m *PriceService) XXX_Size() int {
	return m.Size()
}
func (m *PriceService) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceService.DiscardUnknown(m)
}

var xxx_messageInfo_PriceService proto.InternalMessageInfo

func (m *PriceService) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *PriceService) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PriceService) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterEnum("feeds.v1beta1.PriceOption", PriceOption_name, PriceOption_value)
	proto.RegisterType((*Signal)(nil), "feeds.v1beta1.Signal")
	proto.RegisterType((*DelegatorSignals)(nil), "feeds.v1beta1.DelegatorSignals")
	proto.RegisterType((*Feed)(nil), "feeds.v1beta1.Feed")
	proto.RegisterType((*Price)(nil), "feeds.v1beta1.Price")
	proto.RegisterType((*SubmitPrice)(nil), "feeds.v1beta1.SubmitPrice")
	proto.RegisterType((*PriceValidator)(nil), "feeds.v1beta1.PriceValidator")
	proto.RegisterType((*PriceService)(nil), "feeds.v1beta1.PriceService")
}

func init() { proto.RegisterFile("feeds/v1beta1/feeds.proto", fileDescriptor_4b338829e148e6ea) }

var fileDescriptor_4b338829e148e6ea = []byte{
	// 722 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x41, 0x6b, 0xdb, 0x48,
	0x18, 0xb5, 0x6c, 0xd9, 0x89, 0xc7, 0xde, 0x60, 0x06, 0x27, 0xab, 0x68, 0x83, 0xec, 0xcd, 0xc9,
	0xbb, 0xb0, 0x16, 0xc9, 0xee, 0x86, 0x52, 0xda, 0x83, 0x1d, 0x3b, 0x44, 0x10, 0x62, 0x23, 0xdb,
	0x39, 0xf4, 0x22, 0xc6, 0xd6, 0xc4, 0x1a, 0x2a, 0x4b, 0x42, 0x1a, 0xab, 0xed, 0xb1, 0xb7, 0x92,
	0x53, 0xa1, 0xe7, 0x40, 0xa1, 0xc7, 0x5e, 0xfb, 0x23, 0x72, 0x0c, 0x3d, 0xf5, 0x14, 0x8a, 0x03,
	0xa5, 0x7f, 0xa0, 0xf4, 0x5a, 0x34, 0x23, 0xdb, 0x71, 0x70, 0x68, 0xa1, 0x97, 0xde, 0xe6, 0x7b,
	0xdf, 0x7b, 0xdf, 0x7c, 0xef, 0x21, 0x0d, 0xd8, 0x3c, 0xc5, 0xd8, 0x0c, 0xd4, 0x70, 0xa7, 0x8f,
	0x29, 0xda, 0x51, 0x59, 0x55, 0xf5, 0x7c, 0x97, 0xba, 0xf0, 0x37, 0x5e, 0xc4, 0x2d, 0x79, 0x73,
	0xe0, 0x06, 0x23, 0x37, 0x30, 0x58, 0x53, 0xe5, 0x05, 0x67, 0xca, 0xc5, 0xa1, 0x3b, 0x74, 0x39,
	0x1e, 0x9d, 0x38, 0xba, 0xfd, 0x00, 0x64, 0x3a, 0x64, 0xe8, 0x20, 0x1b, 0x6e, 0x80, 0x24, 0x31,
	0x25, 0xa1, 0x2c, 0x54, 0xb2, 0xf5, 0xcc, 0xe4, 0xaa, 0x94, 0xd4, 0x1a, 0x7a, 0x92, 0x98, 0xb0,
	0x08, 0xd2, 0x9e, 0xfb, 0x04, 0xfb, 0x52, 0xb2, 0x2c, 0x54, 0x44, 0x9d, 0x17, 0xf7, 0xc5, 0xcf,
	0xaf, 0x4b, 0xc2, 0xf6, 0x73, 0x01, 0x14, 0x1a, 0xd8, 0xc6, 0x43, 0x44, 0x5d, 0x9f, 0xcf, 0x09,
	0xe0, 0x1e, 0xc8, 0x9a, 0x53, 0x2c, 0x9e, 0x27, 0xbd, 0x7f, 0xf7, 0x4f, 0x31, 0xde, 0xa6, 0x66,
	0x9a, 0x3e, 0x0e, 0x82, 0x0e, 0xf5, 0x89, 0x33, 0xd4, 0xe7, 0x54, 0xf8, 0x3f, 0x58, 0x09, 0xf8,
	0x08, 0x29, 0x59, 0x4e, 0x55, 0x72, 0xbb, 0xeb, 0xd5, 0x05, 0x73, 0x55, 0x7e, 0x41, 0x5d, 0xbc,
	0xb8, 0x2a, 0x25, 0xf4, 0x29, 0x77, 0xfb, 0x93, 0x00, 0xc4, 0x03, 0x8c, 0x4d, 0xf8, 0x17, 0xc8,
	0x72, 0xcc, 0x98, 0xf9, 0xc8, 0x4f, 0xae, 0x4a, 0xab, 0x5c, 0xa6, 0x35, 0xf4, 0x55, 0xde, 0xd6,
	0xee, 0xf0, 0x04, 0x65, 0xb0, 0x4a, 0x1c, 0x8a, 0xfd, 0x10, 0xd9, 0x52, 0xaa, 0x2c, 0x54, 0x52,
	0xfa, 0xac, 0x86, 0xfb, 0x40, 0xb1, 0x51, 0x40, 0x8d, 0x29, 0x60, 0x8c, 0x3d, 0x13, 0x51, 0x6c,
	0x50, 0x32, 0xc2, 0x01, 0x45, 0x23, 0x4f, 0x12, 0x99, 0xe2, 0x8f, 0x88, 0xa5, 0xc5, 0xa4, 0x1e,
	0xe3, 0x74, 0xa7, 0x14, 0xb8, 0x07, 0x7e, 0x37, 0x71, 0x48, 0x10, 0x25, 0xae, 0x63, 0x10, 0xc7,
	0xa0, 0x96, 0x3b, 0x0e, 0x90, 0x63, 0x52, 0x4b, 0x4a, 0x33, 0xf5, 0xfa, 0xac, 0xad, 0x39, 0xdd,
	0x59, 0x33, 0x0e, 0xfb, 0xad, 0x00, 0xd2, 0x6d, 0x9f, 0x0c, 0x30, 0x7c, 0x08, 0xf2, 0x5e, 0x74,
	0x30, 0x5c, 0x2f, 0xe2, 0x32, 0xb3, 0x6b, 0xbb, 0xf2, 0xad, 0xb8, 0x18, 0xb7, 0xc5, 0x18, 0x7a,
	0xce, 0x9b, 0x17, 0x8b, 0x41, 0x25, 0xbf, 0x1b, 0x54, 0xa4, 0x64, 0x79, 0x44, 0x41, 0xb1, 0xfb,
	0xb7, 0x40, 0xf6, 0xb6, 0xef, 0x39, 0x10, 0x6f, 0xfb, 0x4a, 0x00, 0xb9, 0xce, 0xb8, 0x3f, 0x22,
	0xf4, 0x97, 0xd8, 0x39, 0xde, 0xea, 0x8b, 0x00, 0xd6, 0xd8, 0x1d, 0x27, 0xc8, 0x26, 0x26, 0xfb,
	0xec, 0x7e, 0x72, 0xb1, 0x2d, 0x90, 0x0d, 0xa7, 0xb3, 0xf8, 0x62, 0xfa, 0x1c, 0x58, 0x5c, 0x3b,
	0xf5, 0x63, 0x6b, 0x8b, 0x77, 0x46, 0x9d, 0xbe, 0x15, 0x35, 0xfc, 0x13, 0xe4, 0xfb, 0xb6, 0x3b,
	0x78, 0x6c, 0x58, 0x98, 0x0c, 0x2d, 0x2a, 0x65, 0x18, 0x21, 0xc7, 0xb0, 0x43, 0x06, 0xc5, 0xbe,
	0xbb, 0x20, 0xcf, 0x1c, 0x74, 0xb0, 0x1f, 0x46, 0x63, 0x21, 0x10, 0x2d, 0x14, 0x58, 0xfc, 0x37,
	0xd1, 0xd9, 0x19, 0x4a, 0x60, 0x25, 0xc4, 0x7e, 0x10, 0x65, 0xc0, 0x7d, 0x4c, 0x4b, 0x58, 0x00,
	0xa9, 0xb1, 0xcf, 0xff, 0x89, 0xac, 0x1e, 0x1d, 0xf9, 0xd4, 0xbf, 0xbf, 0x0a, 0x20, 0x77, 0x23,
	0x18, 0x78, 0x0f, 0x48, 0x6d, 0x5d, 0xdb, 0x6f, 0x1a, 0xad, 0x76, 0x57, 0x6b, 0x1d, 0x1b, 0xbd,
	0xe3, 0x4e, 0xbb, 0xb9, 0xaf, 0x1d, 0x68, 0xcd, 0x46, 0x21, 0x21, 0xcb, 0x67, 0xe7, 0xe5, 0x8d,
	0x1b, 0xf4, 0x9e, 0x13, 0x78, 0x78, 0x40, 0x4e, 0x09, 0x36, 0x97, 0x29, 0x7b, 0xed, 0x76, 0x4b,
	0xef, 0x36, 0x1b, 0x05, 0x61, 0x99, 0x72, 0xec, 0x79, 0xae, 0x4f, 0x97, 0x2a, 0x6b, 0x27, 0x35,
	0xed, 0xa8, 0x56, 0x3f, 0x6a, 0x16, 0x92, 0x4b, 0x94, 0x28, 0x44, 0xc4, 0x46, 0x7d, 0x1b, 0xc3,
	0xff, 0xc0, 0xc6, 0x82, 0x72, 0xae, 0x4b, 0xc9, 0xd2, 0xd9, 0x79, 0xb9, 0x78, 0x43, 0x57, 0x9b,
	0xaa, 0x64, 0xf1, 0xc5, 0x1b, 0x25, 0x51, 0x3f, 0xbc, 0x98, 0x28, 0xc2, 0xe5, 0x44, 0x11, 0x3e,
	0x4e, 0x14, 0xe1, 0xe5, 0xb5, 0x92, 0xb8, 0xbc, 0x56, 0x12, 0x1f, 0xae, 0x95, 0xc4, 0xa3, 0xea,
	0x90, 0x50, 0x6b, 0xdc, 0xaf, 0x0e, 0xdc, 0x91, 0xda, 0x47, 0x8e, 0xc9, 0x9e, 0xd9, 0x81, 0x6b,
	0xab, 0x03, 0x0b, 0x11, 0x47, 0x0d, 0x77, 0xd5, 0xa7, 0xfc, 0x01, 0x57, 0xe9, 0x33, 0x0f, 0x07,
	0xfd, 0x0c, 0x23, 0xfc, 0xfb, 0x2d, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x54, 0xd6, 0xd8, 0xe4, 0x05,
	0x00, 0x00,
}

func (this *Signal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Signal)
	if !ok {
		that2, ok := that.(Signal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	return true
}
func (this *Feed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feed)
	if !ok {
		that2, ok := that.(Feed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignalID != that1.SignalID {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.Interval != that1.Interval {
		return false
	}
	if this.LastIntervalUpdateTimestamp != that1.LastIntervalUpdateTimestamp {
		return false
	}
	if this.DeviationInThousandth != that1.DeviationInThousandth {
		return false
	}
	return true
}
func (this *Price) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Price)
	if !ok {
		that2, ok := that.(Price)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PriceOption != that1.PriceOption {
		return false
	}
	if this.SignalID != that1.SignalID {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *SubmitPrice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmitPrice)
	if !ok {
		that2, ok := that.(SubmitPrice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PriceOption != that1.PriceOption {
		return false
	}
	if this.SignalID != that1.SignalID {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	return true
}
func (this *PriceValidator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PriceValidator)
	if !ok {
		that2, ok := that.(PriceValidator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PriceOption != that1.PriceOption {
		return false
	}
	if this.Validator != that1.Validator {
		return false
	}
	if this.SignalID != that1.SignalID {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	return true
}
func (this *PriceService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PriceService)
	if !ok {
		that2, ok := that.(PriceService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (m *Signal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorSignals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorSignals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorSignals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signals) > 0 {
		for iNdEx := len(m.Signals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFeeds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Feed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviationInThousandth != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.DeviationInThousandth))
		i--
		dAtA[i] = 0x28
	}
	if m.LastIntervalUpdateTimestamp != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.LastIntervalUpdateTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.Interval != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x18
	}
	if m.Power != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SignalID) > 0 {
		i -= len(m.SignalID)
		copy(dAtA[i:], m.SignalID)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.SignalID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Price) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Price) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Price) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.Price != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SignalID) > 0 {
		i -= len(m.SignalID)
		copy(dAtA[i:], m.SignalID)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.SignalID)))
		i--
		dAtA[i] = 0x12
	}
	if m.PriceOption != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.PriceOption))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubmitPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SignalID) > 0 {
		i -= len(m.SignalID)
		copy(dAtA[i:], m.SignalID)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.SignalID)))
		i--
		dAtA[i] = 0x12
	}
	if m.PriceOption != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.PriceOption))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PriceValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.Timestamp != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.Price != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SignalID) > 0 {
		i -= len(m.SignalID)
		copy(dAtA[i:], m.SignalID)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.SignalID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if m.PriceOption != 0 {
		i = encodeVarintFeeds(dAtA, i, uint64(m.PriceOption))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PriceService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintFeeds(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFeeds(dAtA []byte, offset int, v uint64) int {
	offset -= sovFeeds(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Signal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovFeeds(uint64(m.Power))
	}
	return n
}

func (m *DelegatorSignals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	if len(m.Signals) > 0 {
		for _, e := range m.Signals {
			l = e.Size()
			n += 1 + l + sovFeeds(uint64(l))
		}
	}
	return n
}

func (m *Feed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignalID)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovFeeds(uint64(m.Power))
	}
	if m.Interval != 0 {
		n += 1 + sovFeeds(uint64(m.Interval))
	}
	if m.LastIntervalUpdateTimestamp != 0 {
		n += 1 + sovFeeds(uint64(m.LastIntervalUpdateTimestamp))
	}
	if m.DeviationInThousandth != 0 {
		n += 1 + sovFeeds(uint64(m.DeviationInThousandth))
	}
	return n
}

func (m *Price) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PriceOption != 0 {
		n += 1 + sovFeeds(uint64(m.PriceOption))
	}
	l = len(m.SignalID)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovFeeds(uint64(m.Price))
	}
	if m.Timestamp != 0 {
		n += 1 + sovFeeds(uint64(m.Timestamp))
	}
	return n
}

func (m *SubmitPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PriceOption != 0 {
		n += 1 + sovFeeds(uint64(m.PriceOption))
	}
	l = len(m.SignalID)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovFeeds(uint64(m.Price))
	}
	return n
}

func (m *PriceValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PriceOption != 0 {
		n += 1 + sovFeeds(uint64(m.PriceOption))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	l = len(m.SignalID)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovFeeds(uint64(m.Price))
	}
	if m.Timestamp != 0 {
		n += 1 + sovFeeds(uint64(m.Timestamp))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovFeeds(uint64(m.BlockHeight))
	}
	return n
}

func (m *PriceService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovFeeds(uint64(l))
	}
	return n
}

func sovFeeds(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFeeds(x uint64) (n int) {
	return sovFeeds(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Signal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorSignals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorSignals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorSignals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signals = append(m.Signals, Signal{})
			if err := m.Signals[len(m.Signals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIntervalUpdateTimestamp", wireType)
			}
			m.LastIntervalUpdateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIntervalUpdateTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviationInThousandth", wireType)
			}
			m.DeviationInThousandth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviationInThousandth |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Price) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Price: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Price: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceOption", wireType)
			}
			m.PriceOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceOption |= PriceOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceOption", wireType)
			}
			m.PriceOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceOption |= PriceOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceOption", wireType)
			}
			m.PriceOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceOption |= PriceOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeeds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeeds(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeeds
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeeds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFeeds
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFeeds
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFeeds
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFeeds        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeeds          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFeeds = fmt.Errorf("proto: unexpected end of group")
)
