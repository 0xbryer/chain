syntax = "proto3";
package bandtss.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/api/annotations.proto";
import "bandtss/v1beta1/bandtss.proto";
import "bandtss/v1beta1/genesis.proto";
import "tss/v1beta1/tss.proto";

option go_package = "github.com/bandprotocol/chain/v2/x/bandtss/types";

// Query defines the gRPC querier service.
service Query {
  // Params queries parameters of Bandtss module
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/bandtss/v1beta1/params";
  }

  // IsGrantee queries grant of account on this granter.
  rpc IsGrantee(QueryIsGranteeRequest) returns (QueryIsGranteeResponse) {
    option (google.api.http).get = "/bandtss/v1beta1/is_grantee/{granter}/{grantee}";
  }

  // Members queries all members.
  rpc Members(QueryMembersRequest) returns (QueryMembersResponse) {
    option (google.api.http).get = "/bandtss/v1beta1/members";
  }

  // Member queries the member information of the address.
  rpc Member(QueryMemberRequest) returns (QueryMemberResponse) {
    option (google.api.http).get = "/bandtss/v1beta1/members/{address}";
  }

  // CurrentGroup queries the current group information.
  rpc CurrentGroup(QueryCurrentGroupRequest) returns (QueryCurrentGroupResponse) {
    option (google.api.http).get = "/bandtss/v1beta1/current_group";
  }

  // Signing queries the signing result of the signing request.
  rpc Signing(QuerySigningRequest) returns (QuerySigningResponse) {
    option (google.api.http).get = "/bandtss/v1beta1/signings/{signing_id}";
  }

  // Replacement queries the replacement information.
  rpc Replacement(QueryReplacementRequest) returns (QueryReplacementResponse) {
    option (google.api.http).get = "/bandtss/v1beta1/replacement";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // pagination defines an optional pagination for the request.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryIsSignerRequest is request type for the Query/IsGrantee RPC method.
message QueryIsGranteeRequest {
  // granter is a granter address
  string granter = 1;
  // grantee is a grantee address
  string grantee = 2;
}

// QueryIsGranteeResponse is response type for the Query/IsGrantee RPC method.
message QueryIsGranteeResponse {
  // is_grantee is true if this account has been granted by granter
  bool is_grantee = 1;
}

// QueryMembersRequest is the request type for the Query/Members RPC method.
message QueryMembersRequest {
  // is_active define filter on members
  bool is_active = 1;
  // pagination defines pagination settings for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryMembersResponse is the response type for the Query/Members RPC method.
message QueryMembersResponse {
  // members are those individuals who correspond to the provided is_active status.
  repeated Member members = 1;
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryMemberRequest is the request type for the Query/Member RPC method.
message QueryMemberRequest {
  // address is the member address.
  string address = 1;
}

// QueryMemberResponse is the response type for the Query/Member RPC method.
message QueryMemberResponse {
  // member is the member detail.
  Member member = 1 [(gogoproto.nullable) = false];
}

// QueryCurrentGroupRequest is the request type for the Query/CurrentGroup RPC method.
message QueryCurrentGroupRequest {}

// QueryCurrentGroupResponse is the response type for the Query/CurrentGroup RPC method.
message QueryCurrentGroupResponse {
  // group_id is the ID of the current group.
  uint64 group_id = 1 [
    (gogoproto.customname) = "GroupID",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // size is the number of members in the group.
  uint64 size = 2;
  // threshold is the minimum number of members needed to generate a valid signature.
  uint64 threshold = 3;
  // pub_key is the public key generated by the group.
  bytes pub_key = 4 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
  // status is the status of the current group.
  .tss.v1beta1.GroupStatus status = 5;
}

// QuerySingingRequest is the request type for the Query/Signing RPC method.
message QuerySigningRequest {
  // signing_id is the ID of the signing request.
  uint64 signing_id = 1;
}

// QuerySigningResponse is the response type for the Query/Signing RPC method.
message QuerySigningResponse {
  // fee is the total tokens that will be paid for this bandtss signing.
  repeated cosmos.base.v1beta1.Coin fee = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // requester is the address of requester who paid for the Bandtss signing.
  string requester = 2;
  // current_group_signing_result is the signing result from the current group.
  .tss.v1beta1.SigningResult current_group_signing_result = 3;
  // replacing_group_signing_result is the signing result from the replacing group.
  .tss.v1beta1.SigningResult replacing_group_signing_result = 4;
}

// QueryReplacementRequest is the request type for the Query/Replacement RPC method.
message QueryReplacementRequest {}

// QueryReplacementResponse is the response type for the Query/Replacement RPC method.
message QueryReplacementResponse {
  // replacement is the replacement information.
  Replacement replacement = 1 [(gogoproto.nullable) = false];
}
