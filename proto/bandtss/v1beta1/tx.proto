syntax = "proto3";
package bandtss.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";

import "bandtss/v1beta1/genesis.proto";

option go_package = "github.com/bandprotocol/chain/v2/x/bandtss/types";

// Msg defines the bandtss Msg service.
service Msg {
  // CreateGroup creates a new group with a list of members.
  rpc CreateGroup(MsgCreateGroup) returns (MsgCreateGroupResponse);

  // ReplaceGroup replaces the current group with another group.
  rpc ReplaceGroup(MsgReplaceGroup) returns (MsgReplaceGroupResponse);

  // RequestSignature submits a general message to be signed by a specific group.
  rpc RequestSignature(MsgRequestSignature) returns (MsgRequestSignatureResponse);

  // Activate activates the status of the sender.
  rpc Activate(MsgActivate) returns (MsgActivateResponse);

  // HealthCheck marks last active of the sender.
  rpc HealthCheck(MsgHealthCheck) returns (MsgHealthCheckResponse);

  // UpdateParams updates the x/bandtss parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateGroup is the Msg/CreateGroup request type.
message MsgCreateGroup {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "bandtss/MsgCreateGroup";

  // members is a list of members in this group.
  repeated string members = 1;
  // threshold is a minimum number of members required to produce a signature.
  uint64 threshold = 2;
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgCreateGroupResponse is the Msg/CreateGroup response type.
message MsgCreateGroupResponse {}

// MsgReplaceGroup is the Msg/ReplaceGroup request type.
message MsgReplaceGroup {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "bandtss/MsgReplaceGroup";

  // new_group_id is the ID of the group that want to replace.
  uint64 new_group_id = 1 [
    (gogoproto.customname) = "NewGroupID",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // exec_time is the time that will be substituted in place of the group.
  google.protobuf.Timestamp exec_time = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgReplaceGroupResponse is the Msg/ReplaceGroup response type.
message MsgReplaceGroupResponse {}

// MsgRequestSignature is a request message used for initiating the signing process.
message MsgRequestSignature {
  option (cosmos.msg.v1.signer)      = "sender";
  option (amino.name)                = "bandtss/MsgRequestSignature";
  option (gogoproto.goproto_getters) = false;

  // content is the signature order of this request signature message.
  google.protobuf.Any content = 1 [(cosmos_proto.accepts_interface) = "Content"];
  // fee_limit is the maximum tokens that will be paid for this request.
  repeated cosmos.base.v1beta1.Coin fee_limit = 2
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // sender is the requester of the signing process.
  string sender = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgRequestSignatureResponse is response data for MsgRequestSignature message
message MsgRequestSignatureResponse {}

// MsgActivate is a message used to activate the status of the sender.
message MsgActivate {
  option (cosmos.msg.v1.signer) = "address";
  option (amino.name)           = "bandtss/MsgActivate";

  // address is the signer of this message, who must be a member of the group.
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgActivateResponse is response data for MsgActivate message
message MsgActivateResponse {}

// MsgHealthCheck is a message used to show if the address is still active.
message MsgHealthCheck {
  option (cosmos.msg.v1.signer) = "address";
  option (amino.name)           = "bandtss/MsgHealthCheck";

  // address is the signer of this message, who must be a member of the group.
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgHealthCheckResponse is response data for MsgHealthCheck message
message MsgHealthCheckResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "bandtss/MsgUpdateParams";

  // params defines the x/tss parameters to update.
  Params params = 1 [(gogoproto.nullable) = false];
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgUpdateParamsResponse defines the response structure for executing a MsgUpdateParams message.
message MsgUpdateParamsResponse {}
