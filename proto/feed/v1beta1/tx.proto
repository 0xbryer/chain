syntax = "proto3";
package feed.v1beta1;

option go_package = "github.com/bandprotocol/chain/v2/x/feed/types";

import "gogoproto/gogo.proto";
import "feed/v1beta1/feed.proto";
import "feed/v1beta1/params.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

// Define a gRPC service named Msg
service Msg {
  // RPC method to update symbols
  rpc UpdateSymbols(MsgUpdateSymbols) returns (MsgUpdateSymbolsResponse);

  // RPC method to remove symbols
  rpc RemoveSymbols(MsgRemoveSymbols) returns (MsgRemoveSymbolsResponse);

  // RPC method to submit prices
  rpc SubmitPrices(MsgSubmitPrices) returns (MsgSubmitPricesResponse);

  // RPC method to update parameters
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgUpdateSymbols is the transaction message to add and update symbols.
message MsgUpdateSymbols {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "feed/MsgUpdateSymbols";

  // The address of the authority that is performing the operation.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // A list of symbols to update or add.
  repeated Symbol symbols = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateSymbolsResponse is the response type for the Msg/UpdateSymbols RPC method.
message MsgUpdateSymbolsResponse {}

// MsgRemoveSymbols is the transaction message to remove symbols.
message MsgRemoveSymbols {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "feed/MsgAddSymbols";

  // The address of the authority that is performing the operation.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // A list of symbols to remove.
  repeated string symbols = 2;
}

// MsgRemoveSymbolsResponse is the response type for the Msg/RemoveSymbols RPC method.
message MsgRemoveSymbolsResponse {}

// MsgSubmitPrices is the transaction message to submit multiple prices.
message MsgSubmitPrices {
  option (cosmos.msg.v1.signer) = "validator";
  option (amino.name)           = "feed/MsgSubmitPrices";

  // The address of the validator that is performing the operation.
  string validator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // A list of prices to submit.
  repeated Price prices = 2 [(gogoproto.nullable) = false];
}

// MsgSubmitPricesResponse is the response type for the Msg/SubmitPrices RPC method.
message MsgSubmitPricesResponse {}

// MsgUpdateParams is the transaction message to update parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "feed/MsgUpdateParams";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/feed parameters to update.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgSubmitPricesResponse is the response type for the Msg/UpdateParams RPC method.
message MsgUpdateParamsResponse {}
