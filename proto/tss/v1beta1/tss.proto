syntax = "proto3";
package tss.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

option go_package            = "github.com/bandprotocol/chain/v2/x/tss/types";
option (gogoproto.equal_all) = true;

// Group is a type representing a participant group in a Distributed Key Generation or signing process.
message Group {
  // group_id is the unique identifier of the group.
  uint64 group_id = 1
      [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // size is the number of members in the group.
  uint64 size = 2;
  // threshold is the minimum number of members needed to generate a valid signature.
  uint64 threshold = 3;
  // pub_key is the public key generated by the group after successful completion of the DKG process.
  bytes pub_key = 4 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
  // status represents the current stage of the group in the DKG or signing process.
  GroupStatus status = 5;
  // fee is the tokens that will be paid per signing.
  repeated cosmos.base.v1beta1.Coin fee = 6
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // latest_replacement_id is the latest replacement ID of the group.
  uint64 latest_replacement_id = 7 [(gogoproto.customname) = "LatestReplacementID"];
  // created_height is the block height when the group was created.
  uint64 created_height = 8;
}

// Replacement represents a group that will replaced with another group in the replacement process.
message Replacement {
  // id is the unique identifier of the replacement.
  uint64 id = 1 [(gogoproto.customname) = "ID"];
  // signing_id is the unique identifier of the signing process.
  uint64 signing_id = 2 [
    (gogoproto.customname) = "SigningID",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v2/pkg/tss.SigningID"
  ];
  // from_group_id is the ID of the group that want to replace.
  uint64 from_group_id = 3 [
    (gogoproto.customname) = "FromGroupID",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // from_pub_key is the public key of the group that want to replace.
  bytes from_pub_key = 4 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
  // to_group_id is the ID of the group that will take the place of another group.
  uint64 to_group_id = 5
      [(gogoproto.customname) = "ToGroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // to_pub_key is the public key of the group that will take the place of another group.
  bytes to_pub_key = 6 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
  // status is an enumeration of the possible statuses of a group replacement process.
  ReplacementStatus status = 7;
  // exec_time is the time that will be substituted in place of the group.
  google.protobuf.Timestamp exec_time = 8 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

// ReplacementStatus is an enumeration of the possible statuses of a group replacement process.
enum ReplacementStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // REPLACEMENT_STATUS_UNSPECIFIED is the status of a group replacement that has not been specified.
  REPLACEMENT_STATUS_UNSPECIFIED = 0;
  // REPLACEMENT_STATUS_WAITING is the status of a group replacement that is waiting to be replaced in the
  // protocol.
  REPLACEMENT_STATUS_WAITING = 1;
  // REPLACEMENT_STATUS_SUCCESS is the status of a group replacement that has success in the protocol.
  REPLACEMENT_STATUS_SUCCESS = 2;
  // REPLACEMENT_STATUS_FALLEN is the status of a group replacement that has fallen out of the protocol.
  REPLACEMENT_STATUS_FALLEN = 3;
}

// Round1Info contains all necessary information for handling round 1 of the DKG process.
message Round1Info {
  // member_id is the unique identifier of a group member.
  uint64 member_id = 1
      [(gogoproto.customname) = "MemberID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"];
  // coefficients_commits is a list of commitments to the coefficients of the member's secret polynomial.
  repeated bytes coefficient_commits = 2 [(gogoproto.castrepeated) = "github.com/bandprotocol/chain/v2/pkg/tss.Points"];
  // one_time_pub_key is the one-time public key used by the member to encrypt secret shares.
  bytes one_time_pub_key = 3 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
  // a0_signature is the member's signature on the first coefficient of its secret polynomial.
  bytes a0_signature = 4 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"];
  // one_time_signature is the member's signature on its one-time public key.
  bytes one_time_signature = 5 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"];
}

// Round2Info contains all necessary information for handling round 2 of the DKG process.
message Round2Info {
  // member_id is the unique identifier of a group member.
  uint64 member_id = 1
      [(gogoproto.customname) = "MemberID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"];
  // encrypted_secret_shares is a list of secret shares encrypted under the public keys of other members.
  repeated bytes encrypted_secret_shares = 2
      [(gogoproto.castrepeated) = "github.com/bandprotocol/chain/v2/pkg/tss.Scalars"];
}

// DE contains the public parts of a member's decryption and encryption keys.
message DE {
  // pub_d is the public value of own commitment (D).
  bytes pub_d = 1 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
  // pub_e is the public value of own commitment (E).
  bytes pub_e = 2 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
}

// DEQueue is a simple queue data structure for holding DE objects.
message DEQueue {
  // head is the index of the first element in the queue.
  uint64 head = 1;
  // tail is the index of the last element in the queue.
  uint64 tail = 2;
}

// Signing contains all necessary information for handling a signing request.
message Signing {
  // id is the unique identifier of the signing.
  uint64 id = 1
      [(gogoproto.customname) = "ID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.SigningID"];
  // group_id is the unique identifier of the group.
  uint64 group_id = 2
      [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // group_pub_key is the public key of the group that sign this message.
  bytes group_pub_key = 3 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
  // assigned_members is a list of members assigned to the signing process.
  repeated AssignedMember assigned_members = 4
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "AssignedMembers"];
  // message is the message to be signed.
  bytes message = 5 [(gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
  // group_pub_nonce is the public nonce generated by the group for this signing process.
  bytes group_pub_nonce = 6 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
  // signature is the group's signature on the message.
  bytes signature = 7 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"];
  // fee is the total tokens that will be paid for this signing
  repeated cosmos.base.v1beta1.Coin fee = 8
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // status represents the current stage of the signing in the signing process.
  SigningStatus status = 9;
  // created_height is the block height when the signing was created.
  uint64 created_height = 10;
  // requester is the address of requester who paid for the TSS fee.
  string requester = 11;
}

// AssignedMember is a type representing a member that has been assigned to a signing process.
message AssignedMember {
  // member_id is the unique identifier of the member.
  uint64 member_id = 1
      [(gogoproto.customname) = "MemberID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"];
  // member is the human-readable name of the member.
  string address = 2;
  // pub_key is the public part of a member.
  bytes pub_key = 3 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
  // pub_d is the public part of a member's decryption key.
  bytes pub_d = 4 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
  // pub_e is the public part of a member's encryption key.
  bytes pub_e = 5 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
  // binding_factor is the binding factor of the member for the signing process.
  bytes binding_factor = 6 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Scalar"];
  // pub_nonce is the public nonce of the member for the signing process.
  bytes pub_nonce = 7 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
}

// PendingSignings is a list of all signing processes that are currently pending.
message PendingSignings {
  // signing_ids is a list of identifiers for the signing processes.
  repeated uint64 signing_ids = 1;
}

// SigningStatus is an enumeration of the possible statuses of a singing.
enum SigningStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // SIGNING_STATUS_UNSPECIFIED is the status of a signing that has not been specified.
  SIGNING_STATUS_UNSPECIFIED = 0;
  // SIGNING_STATUS_WAITING is the status of a signing that is waiting to be signed in the protocol.
  SIGNING_STATUS_WAITING = 1;
  // SIGNING_STATUS_SUCCESS is the status of a signing that has success in the protocol.
  SIGNING_STATUS_SUCCESS = 2;
  // SIGNING_STATUS_EXPIRED is the status of a signing that has expired in the protocol.
  SIGNING_STATUS_EXPIRED = 3;
  // SIGNING_STATUS_FALLEN is the status of a signing that has fallen out of the protocol.
  SIGNING_STATUS_FALLEN = 4;
}

// Member is a type representing a member of the group.
message Member {
  // id is the unique identifier of a member.
  uint64 id = 1
      [(gogoproto.customname) = "ID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"];
  // group_id is the group id of this member.
  uint64 group_id = 2
      [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // address is the address of the member.
  string address = 3;
  // pub_key is the public key of the member.
  bytes pub_key = 4 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
  // is_malicious is a boolean flag indicating whether the member is considered malicious.
  bool is_malicious = 5;
}

// MemberStatus is an enumeration of the possible statuses of a member.
enum MemberStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // MEMBER_STATUS_UNSPECIFIED is unknown status.
  MEMBER_STATUS_UNSPECIFIED = 0;
  // MEMBER_STATUS_ACTIVE is the active status.
  MEMBER_STATUS_ACTIVE = 1;
  // MEMBER_STATUS_INACTIVE is the inactive status.
  MEMBER_STATUS_INACTIVE = 2;
  // MEMBER_STATUS_JAIL is the status when member is jailed.
  MEMBER_STATUS_JAIL = 3;
}

// Status maintains whether a member is an active member.
message Status {
  option (gogoproto.equal) = true;
  // address is the address of the member.
  string address = 1;
  // status represents the current status of the member
  MemberStatus status = 2;
  // since is a block timestamp when a member has been activated/deactivated/jailed
  google.protobuf.Timestamp since = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // last_active is a latest block timestamp when a member is active
  google.protobuf.Timestamp last_active = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

// GroupStatus is an enumeration of the possible statuses of a group.
enum GroupStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // GROUP_STATUS_UNSPECIFIED is the status of a group that has not been specified.
  GROUP_STATUS_UNSPECIFIED = 0;
  // GROUP_STATUS_ROUND_1 is the status of a group that is in the first round of the protocol.
  GROUP_STATUS_ROUND_1 = 1;
  // GROUP_STATUS_ROUND_2 is the status of a group that is in the second round of the protocol.
  GROUP_STATUS_ROUND_2 = 2;
  // GROUP_STATUS_ROUND_3 is the status of a group that is in the third round of the protocol.
  GROUP_STATUS_ROUND_3 = 3;
  // GROUP_STATUS_ACTIVE is the status of a group that is actively participating in the protocol.
  GROUP_STATUS_ACTIVE = 4;
  // GROUP_STATUS_EXPIRED is the status of a group that has expired in the protocol.
  GROUP_STATUS_EXPIRED = 5;
  // GROUP_STATUS_FALLEN is the status of a group that has fallen out of the protocol.
  GROUP_STATUS_FALLEN = 6;
}

// Confirm is a message type used to confirm participation in the protocol.
message Confirm {
  // member_id is the unique identifier of a group member.
  uint64 member_id = 1
      [(gogoproto.customname) = "MemberID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"];
  // own_pub_key_sig is a signature over the member's own public key.
  bytes own_pub_key_sig = 2 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"];
}

// Complaint is a message type used to issue a complaint against a member.
message Complaint {
  // complainant is the member issuing the complaint.
  uint64 complainant = 1 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"];
  // respondent is the member against whom the complaint is issued.
  uint64 respondent = 2 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"];
  // key_sym is a symmetric key between respondent's private key and respondent's public key.
  bytes key_sym = 3 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Point"];
  // signature is the complaint signature that can do a symmetric key validation and complaint verification.
  bytes signature = 4 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.ComplaintSignature"];
}

// ComplaintStatus represents the status of a complaint.
enum ComplaintStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // COMPLAINT_STATUS_UNSPECIFIED represents an undefined status of the complaint.
  COMPLAINT_STATUS_UNSPECIFIED = 0;
  // COMPLAINT_STATUS_SUCCESS represents a successful complaint.
  COMPLAINT_STATUS_SUCCESS = 1;
  // COMPLAINT_STATUS_FAILED represents a failed complaint.
  COMPLAINT_STATUS_FAILED = 2;
}

// ComplaintWithStatus contains information about a complaint with its status.
message ComplaintWithStatus {
  // complaint is the information about the complaint.
  Complaint complaint = 1 [(gogoproto.nullable) = false];
  // complaint_status is the status of the complaint.
  ComplaintStatus complaint_status = 2;
}

// ComplaintsWithStatus contains information about multiple complaints and their status from a single member.
message ComplaintsWithStatus {
  // member_id is the identifier of the member filing the complaints.
  uint64 member_id = 1
      [(gogoproto.customname) = "MemberID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"];
  // complaints_with_status is the list of complaints with their status from this member.
  repeated ComplaintWithStatus complaints_with_status = 2 [(gogoproto.nullable) = false];
}

// PendingProcessGroups is a list of groups that are waiting to be processed.
message PendingProcessGroups {
  // signing_id is a list of group IDs.
  repeated uint64 group_ids = 1
      [(gogoproto.customname) = "GroupIDs", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
}

// PendingProcessSignigns is a list of signings that are waiting to be processed.
message PendingProcessSignings {
  // signing_id is a list of signing IDs.
  repeated uint64 signing_ids = 1 [
    (gogoproto.customname) = "SigningIDs",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v2/pkg/tss.SigningID"
  ];
}

// PartialSignature contains information about a member's partial signature.
message PartialSignature {
  // member_id is the identifier of the member providing the partial signature.
  uint64 member_id = 1
      [(gogoproto.customname) = "MemberID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"];
  // signature is the partial signature provided by this member.
  bytes signature = 2 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"];
}

// TextRequestingSignature defines a standard request signature.
message TextRequestingSignature {
  option (cosmos_proto.implements_interface) = "Content";

  // message is the data that needs to be signed.
  bytes message = 1 [(gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
}

// EVMSignature defines a signature in the EVM format.
message EVMSignature {
  // r_address is the address of the nonce for using in the contract.
  bytes r_address = 1 [(gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
  // signature is the signature part for using in the contract.
  bytes signature = 2 [(gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
}

// PrefixMsgType is an enumeration of the possible prefixes of a singing msg.
enum PrefixMsgType {
  option (gogoproto.goproto_enum_prefix) = false;

  // PREFIX_UNSPECIFIED_MSG is the type of prefix that has not been specified.
  PREFIX_UNSPECIFIED_MSG = 0;
  // PREFIX_TEXT_MSG is the type of prefix that signs a text msg in the protocol.
  PREFIX_TEXT_MSG = 1;
  // PREFIX_REPLACE_GROUP_MSG is the type of prefix that signs a replace group msg in the protocol.
  PREFIX_REPLACE_GROUP_MSG = 2;
  // PREFIX_ORACLE_MSG is the type of prefix that signs an oracle result msg in the protocol.
  PREFIX_ORACLE_MSG = 3;
}
