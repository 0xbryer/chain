syntax = "proto3";
package tss.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";

import "tss/v1beta1/tss.proto";
import "tss/v1beta1/genesis.proto";

option go_package = "github.com/bandprotocol/chain/v2/x/tss/types";

// Msg defines the tss Msg service.
service Msg {
  // CreateGroup creates a new group with a list of members.
  rpc CreateGroup(MsgCreateGroup) returns (MsgCreateGroupResponse);

  // ReplaceGroup replaces the group with another group.
  rpc ReplaceGroup(MsgReplaceGroup) returns (MsgReplaceGroupResponse);

  // UpdateGroupFee updates the group fee.
  rpc UpdateGroupFee(MsgUpdateGroupFee) returns (MsgUpdateGroupFeeResponse);

  // SubmitDKGRound1 submits dkg for computing round 1.
  rpc SubmitDKGRound1(MsgSubmitDKGRound1) returns (MsgSubmitDKGRound1Response);

  // SubmitDKGRound2 submits dkg for computing round 2.
  rpc SubmitDKGRound2(MsgSubmitDKGRound2) returns (MsgSubmitDKGRound2Response);

  // Complain submits proof for complaining malicious.
  rpc Complain(MsgComplain) returns (MsgComplainResponse);

  // Confirm submits own signature for proof that it can derive the secret.
  rpc Confirm(MsgConfirm) returns (MsgConfirmResponse);

  // SubmitDEs submits list of pre-commits DE for signing process.
  rpc SubmitDEs(MsgSubmitDEs) returns (MsgSubmitDEsResponse);

  // RequestSignature submits a general message to be signed by a specific group.
  rpc RequestSignature(MsgRequestSignature) returns (MsgRequestSignatureResponse);

  // SubmitSignature submits signature on task participant need to do.
  rpc SubmitSignature(MsgSubmitSignature) returns (MsgSubmitSignatureResponse);

  // Activate activates the status of the group's member.
  rpc Activate(MsgActivate) returns (MsgActivateResponse);

  // HealthCheck marks last active of the mebmer.
  rpc HealthCheck(MsgHealthCheck) returns (MsgHealthCheckResponse);

  // UpdateParams defines a governance operation for updating the x/mint module
  // parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateGroup is the Msg/CreateGroup request type.
message MsgCreateGroup {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "tss/MsgCreateGroup";

  // members is a list of members in this group.
  repeated string members = 1;
  // threshold is a minimum number of members required to produce a signature.
  uint64 threshold = 2;
  // fee is the tokens that will be paid per signing.
  repeated cosmos.base.v1beta1.Coin fee = 3
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgCreateGroupResponse is the Msg/CreateGroup response type.
message MsgCreateGroupResponse {}

// MsgReplaceGroup is the Msg/ReplaceGroup request type.
message MsgReplaceGroup {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "tss/MsgReplaceGroup";

  // from_group_id is the ID of the group that want to replace, and subsequently remove this group.
  uint64 from_group_id = 1 [
    (gogoproto.customname) = "FromGroupID",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"
  ];
  // to_group_id is the ID of the group that will take the place of another group.
  uint64 to_group_id = 2
      [(gogoproto.customname) = "ToGroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // exec_time is the time that will be substituted in place of the group.
  google.protobuf.Timestamp exec_time = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgReplaceGroupResponse is the Msg/ReplaceGroup response type.
message MsgReplaceGroupResponse {}

// MsgUpdateGroupFee is the Msg/UpdateGroupFee request type.
message MsgUpdateGroupFee {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "tss/MsgUpdateGroupFee";

  // group_id is the ID of the group that want to update.
  uint64 group_id = 1
      [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // fee is the tokens that will be paid per signing.
  repeated cosmos.base.v1beta1.Coin fee = 2
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgUpdateGroupFeeResponse is the Msg/UpdateGroupFee response type.
message MsgUpdateGroupFeeResponse {}

// MsgSubmitDKGRound1 is the Msg/MsgSubmitDKGRound1 request type.
message MsgSubmitDKGRound1 {
  option (cosmos.msg.v1.signer) = "address";
  option (amino.name)           = "tss/MsgSubmitDKGRound1";

  // group_id is ID of the group.
  uint64 group_id = 1
      [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // round1_info is all data that require to handle round 1.
  Round1Info round1_info = 2 [(gogoproto.nullable) = false];
  // address is the signer of this message. Must be a member of this group.
  string address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgSubmitDKGRound1Response is the Msg/SubmitDKGRound1 response type.
message MsgSubmitDKGRound1Response {}

// MsgSubmitDKGRound2 is the Msg/SubmitDKGRound2 request type.
message MsgSubmitDKGRound2 {
  option (cosmos.msg.v1.signer) = "address";
  option (amino.name)           = "tss/MsgSubmitDKGRound2";

  // group_id is ID of the group.
  uint64 group_id = 1
      [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // round2_info is all data that is required to handle round 2.
  Round2Info round2_info = 2 [(gogoproto.nullable) = false];
  // address is the signer of this message. Must be a member of this group.
  string address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgSubmitDKGRound2Response is response data for MsgSubmitDKGRound2 message
message MsgSubmitDKGRound2Response {}

// MsgComplain is a message used to complain about malicious actors in the group.
message MsgComplain {
  option (cosmos.msg.v1.signer) = "address";
  option (amino.name)           = "tss/MsgComplaint";

  // group_id is ID of the group.
  uint64 group_id = 1
      [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // complaints is a list of complaints.
  repeated Complaint complaints = 2 [(gogoproto.nullable) = false];
  // address is the signer of this message. Must be a member of this group.
  string address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgComplainResponse is response data for MsgComplain message
message MsgComplainResponse {}

// MsgConfirm is a message used to confirm own public key.
message MsgConfirm {
  option (cosmos.msg.v1.signer) = "address";
  option (amino.name)           = "tss/MsgConfirm";

  // group_id is ID of the group.
  uint64 group_id = 1
      [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // member_id is ID of the address.
  uint64 member_id = 2
      [(gogoproto.customname) = "MemberID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"];
  // own_pub_key_sig is a signature of the member_i on its own PubKey to confirm
  // that the address is able to derive the PubKey.
  bytes own_pub_key_sig = 3 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"];
  // address is the signer of this message. Must be a member of this group.
  string address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgConfirmResponse is response data for MsgConfirm message
message MsgConfirmResponse {}

// MsgSubmitDEs is a message used to submit a list of DEs.
message MsgSubmitDEs {
  option (cosmos.msg.v1.signer) = "address";
  option (amino.name)           = "tss/MsgSubmitDEs";

  // des is a list of DE objects.
  repeated DE des = 1 [(gogoproto.customname) = "DEs", (gogoproto.nullable) = false];
  // address is the signer of this submission message.
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgSubmitDEsResponse is response data for MsgSubmitDEs message
message MsgSubmitDEsResponse {}

// MsgRequestSignature is a request message used for initiating the signing process.
message MsgRequestSignature {
  option (cosmos.msg.v1.signer)      = "sender";
  option (amino.name)                = "tss/MsgRequestSignature";
  option (gogoproto.goproto_getters) = false;

  // group_id is the unique identifier of the group.
  uint64 group_id = 1
      [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.GroupID"];
  // content defines an interface that a request signature type must implement.
  google.protobuf.Any content = 2 [(cosmos_proto.accepts_interface) = "Content"];
  // fee_limit is the maximum tokens that will be paid for this request.
  repeated cosmos.base.v1beta1.Coin fee_limit = 3
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // sender is the requester of the signing process.
  string sender = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgRequestSignatureResponse is response data for MsgRequestSignature message
message MsgRequestSignatureResponse {}

// MsgSubmitSignature is a message used to submitting signature data.
message MsgSubmitSignature {
  option (cosmos.msg.v1.signer) = "address";
  option (amino.name)           = "tss/MsgSubmitSignature";

  // signing_id is the unique identifier of the signing process.
  uint64 signing_id = 1 [
    (gogoproto.customname) = "SigningID",
    (gogoproto.casttype)   = "github.com/bandprotocol/chain/v2/pkg/tss.SigningID"
  ];
  // member_id is the unique identifier of the group address.
  uint64 member_id = 2
      [(gogoproto.customname) = "MemberID", (gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.MemberID"];
  // signature is the signature produced by the address.
  bytes signature = 3 [(gogoproto.casttype) = "github.com/bandprotocol/chain/v2/pkg/tss.Signature"];
  // address is the signer of this signing message, who must be a member of the group.
  string address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgSubmitSignatureResponse is response data for MsgSubmitSignature message
message MsgSubmitSignatureResponse {}

// MsgActivate is a message used to activate the status of the group's address.
message MsgActivate {
  option (cosmos.msg.v1.signer) = "address";
  option (amino.name)           = "tss/MsgActivate";

  // address is the signer of this message, who must be a member of the group.
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgActivateResponse is response data for MsgActivate message
message MsgActivateResponse {}

// MsgHealthCheck is a message used to show active status if the address is still active.
message MsgHealthCheck {
  option (cosmos.msg.v1.signer) = "address";
  option (amino.name)           = "tss/MsgHealthCheck";

  // address is the signer of this message, who must be a member of the group.
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgHealthCheckResponse is response data for MsgHealthCheck message
message MsgHealthCheckResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "tss/MsgUpdateParams";

  // params defines the x/tss parameters to update.
  Params params = 1 [(gogoproto.nullable) = false];
  // authority is the address of the governance account.
  string authority = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
