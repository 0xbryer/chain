syntax = "proto3";
package restake.v1beta1;

option go_package = "github.com/bandprotocol/chain/v2/x/restake/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "restake/v1beta1/types.proto";

// Query defines the gRPC querier service.
service Query {
  // Keys returns a list of keys.
  rpc Keys(QueryKeysRequest) returns (QueryKeysResponse) {
    option (google.api.http).get = "/restake/v1beta1/keys";
  }

  // Key returns a key information.
  rpc Key(QueryKeyRequest) returns (QueryKeyResponse) {
    option (google.api.http).get = "/restake/v1beta1/keys/{key}";
  }

  // Rewards returns rewards for a specific address.
  rpc Rewards(QueryRewardsRequest) returns (QueryRewardsResponse) {
    option (google.api.http).get = "/restake/v1beta1/lockers/{locker_address}/rewards";
  }

  // Reward returns a reward for a specific address and a key.
  rpc Reward(QueryRewardRequest) returns (QueryRewardResponse) {
    option (google.api.http).get = "/restake/v1beta1/lockers/{locker_address}/rewards/{key}";
  }

  // Locks returns all lock information for a specific address.
  rpc Locks(QueryLocksRequest) returns (QueryLocksResponse) {
    option (google.api.http).get = "/restake/v1beta1/lockers/{locker_address}/locks";
  }

  // Lock returns a lock information for a specific address and a key.
  rpc Lock(QueryLockRequest) returns (QueryLockResponse) {
    option (google.api.http).get = "/restake/v1beta1/lockers/{locker_address}/locks/{key}";
  }
}

// QueryKeysRequest represents the request type for the Query/Keys RPC method.
message QueryKeysRequest {
  // pagination defines optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryKeysResponse represents the response type for the Query/Keys RPC method.
message QueryKeysResponse {
  // keys is a list of keys.
  repeated Key keys = 1;

  // pagination defines pagination parameters in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryKeyRequest represents the request type for the Query/Key RPC method.
message QueryKeyRequest {
  // key is the name of the key that want to query.
  string key = 1;
}

// QueryKeyResponse represents the response type for the Query/Key RPC method.
message QueryKeyResponse {
  // key is a key information.
  Key key = 1 [(gogoproto.nullable) = false];
}

// QueryRewardsRequest represents the request type for the Query/Rewards RPC method.
message QueryRewardsRequest {
  // locker_address is the target address to query rewards.
  string locker_address = 1;

  // pagination defines optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryRewardsResponse represents the response type for the Query/Rewards RPC method.
message QueryRewardsResponse {
  // rewards is a list of rewards for the locker.
  repeated Reward rewards = 1;

  // pagination defines pagination parameters in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryRewardRequest represents the request type for the Query/Reward RPC method.
message QueryRewardRequest {
  // locker_address is the target address to query reward.
  string locker_address = 1;

  // key is the target key to query reward.
  string key = 2;
}

// QueryRewardResponse represents the response type for the Query/Reward RPC method.
message QueryRewardResponse {
  // reward is the reward for the locker and the key.
  Reward reward = 1 [(gogoproto.nullable) = false];
}

// QueryLocksRequest represents the request type for the Query/Locks RPC method.
message QueryLocksRequest {
  // locker_address is the target address to query locks.
  string locker_address = 1;

  // pagination defines optional pagination parameters.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryLocksResponse represents the response type for the Query/Locks RPC method.
message QueryLocksResponse {
  // locks is a list of locks of the locker.
  repeated LockResponse locks = 1;

  // pagination defines pagination parameters in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryLockRequest represents the request type for the Query/Lock RPC method.
message QueryLockRequest {
  // locker_address is the target address to query lock.
  string locker_address = 1;

  // key is the target key to query reward.
  string key = 2;
}

// QueryLockResponse represents the response type for the Query/Lock RPC method.
message QueryLockResponse {
  // lock is the lock of the locker and the key.
  LockResponse lock = 1 [(gogoproto.nullable) = false];
}
