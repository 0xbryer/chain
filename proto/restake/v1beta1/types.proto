syntax = "proto3";
package restake.v1beta1;

option go_package = "github.com/bandprotocol/chain/v2/x/restake/types";

import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

// Key is used for tracking the status and rewards of the keys.
message Key {
  option (gogoproto.equal) = true;

  // name is the name of the key.
  string name = 1;

  // pool_address is the address that holds rewards for this key.
  string pool_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // is_active is the status of the key
  bool is_active = 3;

  // reward_per_powers is a list of reward_per_power.
  // new_reward_per_power = current_reward_per_power + (rewards / total_power)
  repeated cosmos.base.v1beta1.DecCoin reward_per_powers = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true
  ];

  // total_power is the total locked power of the key.
  string total_power = 5 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];

  // remainders is a list of the remainder amounts in the key.
  // this field is used to track remainder amount from claimings in the key pool.
  repeated cosmos.base.v1beta1.DecCoin remainders = 6 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true
  ];
}

// Lock is used to store lock information of each user on each key along with their reward information.
message Lock {
  option (gogoproto.equal) = true;

  // locker_address is the owner's address of the locker.
  string locker_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // key is the key that this lock is locked to.
  string key = 2;

  // amount is the locked power amount.
  string amount = 3 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];

  // pos_reward_debts is a list of reward debt for each reward (only the positive side).
  // Note: Coin and DecCoin can't have negative amounts. so, we split it into two numbers.
  repeated cosmos.base.v1beta1.DecCoin pos_reward_debts = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true
  ];

  // neg_reward_debts is a list of reward debt for each reward (only negative side).
  repeated cosmos.base.v1beta1.DecCoin neg_reward_debts = 5 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true
  ];
}

// Reward is used as response of the query to show final rewards of the key for the user.
message Reward {
  option (gogoproto.equal) = true;

  // key is the key that this reward belongs to.
  string key = 1;

  // rewards is a list of reward.
  repeated cosmos.base.v1beta1.DecCoin rewards = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true
  ];
}

// LockResponse is used as response of the query to show the power amount
// that is locked by the key for the user.
message LockResponse {
  option (gogoproto.equal) = true;

  // key is the key that this lock belongs to.
  string key = 1;

  // amount is a the number of locked power.
  string amount = 2 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
}
