syntax = "proto3";
package feeds.v1beta1;

option go_package = "github.com/bandprotocol/chain/v2/x/feeds/types";

import "gogoproto/gogo.proto";
import "feeds/v1beta1/feeds.proto";
import "feeds/v1beta1/params.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

// Define a gRPC service named Msg
service Msg {
  // RPC method to submit prices
  rpc SubmitPrices(MsgSubmitPrices) returns (MsgSubmitPricesResponse);

  // RPC method to update price service information
  rpc UpdatePriceService(MsgUpdatePriceService) returns (MsgUpdatePriceServiceResponse);

  // RPC method to update parameters
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // RPC method to signal symbols and their powers
  rpc SignalSymbols(MsgSignalSymbols) returns (MsgSignalSymbolsResponse);
}

// MsgSignalSymbols is the transaction message to signal symbols
message MsgSignalSymbols {
  option (cosmos.msg.v1.signer) = "delegator";
  option (amino.name)           = "feeds/MsgSignalSymbols";

  // The address of the delegator that want to signal symbols
  string delegator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The signal details
  repeated Signal signals = 2 [(gogoproto.nullable) = false];
}

// MsgSubmitPricesResponse is the response type for the Msg/SignalSymbols RPC method.
message MsgSignalSymbolsResponse {}

// MsgSubmitPrices is the transaction message to submit multiple prices.
message MsgSubmitPrices {
  option (cosmos.msg.v1.signer) = "validator";
  option (amino.name)           = "feeds/MsgSubmitPrices";

  // The address of the validator that is performing the operation.
  string validator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // The timestamp use as reference of the data.
  int64 timestamp = 2;

  // A list of prices to submit.
  repeated SubmitPrice prices = 3 [(gogoproto.nullable) = false];
}

// MsgSubmitPricesResponse is the response type for the Msg/SubmitPrices RPC method.
message MsgSubmitPricesResponse {}

// MsgUpdatePriceService is the transaction message to update price service's information.
message MsgUpdatePriceService {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "feeds/MsgUpdateParams";

  // The address of the admin that is performing the operation.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // information of price service.
  PriceService price_service = 2 [(gogoproto.nullable) = false];
}

// MsgUpdatePriceServiceResponse is the response type for the Msg/UpdatePriceService RPC method.
message MsgUpdatePriceServiceResponse {}

// MsgUpdateParams is the transaction message to update parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "feeds/MsgUpdateParams";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/feeds parameters to update.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse is the response type for the Msg/UpdateParams RPC method.
message MsgUpdateParamsResponse {}
