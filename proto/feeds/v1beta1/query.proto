syntax = "proto3";
package feeds.v1beta1;

option go_package = "github.com/bandprotocol/chain/v2/x/feeds/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "feeds/v1beta1/feeds.proto";
import "feeds/v1beta1/params.proto";

// Query defines the gRPC querier service.
service Query {
  // RPC method that returns all prices.
  rpc Prices(QueryPricesRequest) returns (QueryPricesResponse) {
    option (google.api.http).get = "/feeds/v1beta1/prices";
  }

  // RPC method that returns price by symbol.
  rpc Price(QueryPriceRequest) returns (QueryPriceResponse) {
    option (google.api.http).get = "/feeds/v1beta1/prices/{symbol}";
  }

  // RPC method that returns prices of a validator.
  rpc PriceValidators(QueryPriceValidatorsRequest) returns (QueryPriceValidatorsResponse) {
    option (google.api.http).get = "/feeds/v1beta1/validators/{validator}/prices";
  }

  // RPC method that returns price of validator by symbol.
  rpc PriceValidator(QueryPriceValidatorRequest) returns (QueryPriceValidatorResponse) {
    option (google.api.http).get = "/feeds/v1beta1/prices/{symbol}/validators/{validator}";
  }

  // RPC method that returns all symbols.
  rpc Symbols(QuerySymbolsRequest) returns (QuerySymbolsResponse) {
    option (google.api.http).get = "/feeds/v1beta1/symbols";
  }

  // RPC method that returns all parameters of the module
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/feeds/v1beta1/params";
  }

  // RPC method that returns information of off-chain.
  rpc OffChain(QueryOffChainRequest) returns (QueryOffChainResponse) {
    option (google.api.http).get = "/feeds/v1beta1/off-chain";
  }
}

// QueryPricesRequest is the request type for the Query/Prices RPC method.
message QueryPricesRequest {}

// QueryPricesResponse is the response type for the Query/Prices RPC method.
message QueryPricesResponse {
  repeated Price prices = 1 [(gogoproto.nullable) = false];
}

// QueryPriceRequest is the request type for the Query/Price RPC method.
message QueryPriceRequest {
  string symbol = 1;
}

// QueryPriceResponse is the response type for the Query/Price RPC method.
message QueryPriceResponse {
  Price                   price            = 1 [(gogoproto.nullable) = false];
  repeated PriceValidator price_validators = 2 [(gogoproto.nullable) = false];
}

// QueryPriceValidatorsRequest is the request type for the Query/PriceValidators RPC method.
message QueryPriceValidatorsRequest {
  string validator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryPriceValidatorsResponse is the response type for the Query/PriceValidators RPC method.
message QueryPriceValidatorsResponse {
  repeated PriceValidator price_validators = 1 [(gogoproto.nullable) = false];
}

// QueryPriceValidatorRequest is the request type for the Query/PriceValidator RPC method.
message QueryPriceValidatorRequest {
  string symbol    = 1;
  string validator = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryPriceValidatorResponse is the response type for the Query/PriceValidator RPC method.
message QueryPriceValidatorResponse {
  PriceValidator price_validator = 1 [(gogoproto.nullable) = false];
}

// QuerySymbolsRequest is the request type for the Query/Symbols RPC method.
message QuerySymbolsRequest {}

// QuerySymbolsResponse is the response type for the Query/Symbols RPC method.
message QuerySymbolsResponse {
  repeated Symbol symbols = 1 [(gogoproto.nullable) = false];
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryOffChainRequest is the request type for the Query/OffChain RPC method.
message QueryOffChainRequest {}

// QueryOffChainResponse is the response type for the Query/OffChain RPC method.
message QueryOffChainResponse {
  OffChain off_chain = 1 [(gogoproto.nullable) = false];
}
