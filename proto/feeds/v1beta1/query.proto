syntax = "proto3";
package feeds.v1beta1;

option go_package = "github.com/bandprotocol/chain/v2/x/feeds/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "feeds/v1beta1/feeds.proto";
import "feeds/v1beta1/params.proto";

// Query defines the gRPC querier service.
service Query {
  // Prices is an RPC method that returns all prices.
  rpc Prices(QueryPricesRequest) returns (QueryPricesResponse) {
    option (google.api.http).get = "/feeds/v1beta1/prices";
  }

  // Price is an RPC method that returns price by signal id.
  rpc Price(QueryPriceRequest) returns (QueryPriceResponse) {
    option (google.api.http).get = "/feeds/v1beta1/prices/{signal_id}";
  }

  // ValidatorPrices is an RPC method that returns prices of a validator.
  rpc ValidatorPrices(QueryValidatorPricesRequest) returns (QueryValidatorPricesResponse) {
    option (google.api.http).get = "/feeds/v1beta1/validators/{validator}/prices";
  }

  // ValidValidator is an RPC method that returns flag to show if the validator is required to send prices.
  rpc ValidValidator(QueryValidValidatorRequest) returns (QueryValidValidatorResponse) {
    option (google.api.http).get = "/feeds/v1beta1/validators/{validator}";
  }

  // SignalTotalPowers is an RPC method that returns all signal-total-powers or specified signal-total-power by signal
  // id.
  rpc SignalTotalPowers(QuerySignalTotalPowersRequest) returns (QuerySignalTotalPowersResponse) {
    option (google.api.http).get = "/feeds/v1beta1/signal-total-powers";
  }

  // Params is an RPC method that returns all parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/feeds/v1beta1/params";
  }

  // ReferenceSourceConfig is an RPC method that returns information of reference price source.
  rpc ReferenceSourceConfig(QueryReferenceSourceConfigRequest) returns (QueryReferenceSourceConfigResponse) {
    option (google.api.http).get = "/feeds/v1beta1/reference-source-config";
  }

  // DelegatorSignals is an RPC method that returns signals of a delegator
  rpc DelegatorSignals(QueryDelegatorSignalsRequest) returns (QueryDelegatorSignalsResponse) {
    option (google.api.http).get = "/feeds/v1beta1/delegators/{delegator}/signals";
  }

  // SupportedFeeds is an RPC method that returns a list of current supported feeds
  rpc SupportedFeeds(QuerySupportedFeedsRequest) returns (QuerySupportedFeedsResponse) {
    option (google.api.http).get = "/feeds/v1beta1/supported-feeds";
  }

  // IsFeeder is an RPC method that returns whether an account is a feeder for specified validator.
  rpc IsFeeder(QueryIsFeederRequest) returns (QueryIsFeederResponse) {
    option (google.api.http).get = "/feeds/v1beta1/feeder/{validator_address}/{feeder_address}";
  }
}

// QueryPricesRequest is the request type for the Query/Prices RPC method.
message QueryPricesRequest {
  // SignalIDs is a List of signal ids to query prices for.
  repeated string signal_ids = 1;

  // Pagination is the pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryPricesResponse is the response type for the Query/Prices RPC method.
message QueryPricesResponse {
  // Prices is a list of prices.
  repeated Price prices = 1;

  // Pagination is the pagination information in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPriceRequest is the request type for the Query/Price RPC method.
message QueryPriceRequest {
  // SignalID is the signal id to query the price for.
  string signal_id = 1;
}

// QueryPriceResponse is the response type for the Query/Price RPC method.
message QueryPriceResponse {
  // Price is the aggregated price of the signal id.
  Price price = 1 [(gogoproto.nullable) = false];
}

// QueryValidatorPricesRequest is the request type for the Query/ValidatorPrices RPC method.
message QueryValidatorPricesRequest {
  // Validator is the validator address to query prices for.
  string validator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // SignalIds is the list of signal ids to query the price for.
  repeated string signal_ids = 2;
}

// QueryValidatorPricesResponse is the response type for the Query/ValidatorPrices RPC method.
message QueryValidatorPricesResponse {
  // ValidatorPrices is a list of prices submitted by the validator.
  repeated ValidatorPrice validator_prices = 1 [(gogoproto.nullable) = false];
}

// QueryValidValidatorRequest is the request type for the Query/ValidValidator RPC method.
message QueryValidValidatorRequest {
  // Validator is the validator address to query the flag.
  string validator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryValidValidatorResponse is the response type for the Query/ValidValidator RPC method.
message QueryValidValidatorResponse {
  // Valid is a valid flag.
  bool valid = 1;
}

// QuerySignalTotalPowersRequest is the request type for the Query/SignalTotalPowers RPC method.
message QuerySignalTotalPowersRequest {
  // SignalIDs is a list of signal ids to query.
  repeated string signal_ids = 1;

  // Pagination is the pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QuerySignalTotalPowersResponse is the response type for the Query/SignalTotalPowers RPC method.
message QuerySignalTotalPowersResponse {
  // SingalTotalPowers is a list of signal-total-powers.
  repeated Signal signal_total_powers = 1;

  // Pagination is the pagination information in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // Params is the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryReferenceSourceConfigRequest is the request type for the Query/ReferenceSourceConfig RPC method.
message QueryReferenceSourceConfigRequest {}

// QueryReferenceSourceConfigResponse is the response type for the Query/ReferenceSourceConfig RPC method.
message QueryReferenceSourceConfigResponse {
  // ReferenceSourceConfig is the information about reference price source.
  ReferenceSourceConfig reference_source_config = 1 [(gogoproto.nullable) = false];
}

// QueryDelegatorSignalsRequest is the request type for the Query/DelegatorSignals RPC method
message QueryDelegatorSignalsRequest {
  // Delegator is the delegator address to query signal for.
  string delegator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryDelegatorSignalsResponse is the response type for the Query/DelegatorSignals RPC method
message QueryDelegatorSignalsResponse {
  repeated Signal signals = 1 [(gogoproto.nullable) = false];
}

// QuerySupportedFeedsRequest is the request type for the Query/SupportedFeeds RPC method
message QuerySupportedFeedsRequest {}

// QuerySupportedFeedsResponse is the response type for the Query/SupportedFeeds RPC method
message QuerySupportedFeedsResponse {
  // SupportedFeeds is a list of currently supported feed-with-deviations, and its last update time and
  // block.
  SupportedFeedWithDeviations supported_feeds = 1 [(gogoproto.nullable) = false];
}

// QueryIsFeederRequest is request type for the Query/IsFeeder RPC method.
message QueryIsFeederRequest {
  // ValidatorAddress is a validator address
  string validator_address = 1;
  // FeederAddress is a candidate account
  string feeder_address = 2;
}

// QueryIsFeederResponse is response type for the Query/IsFeeder RPC method.
message QueryIsFeederResponse {
  // IsFeeder is true if this account has been granted by validator
  bool is_feeder = 1;
}
