syntax = "proto3";
package feeds.v1beta1;

option go_package = "github.com/bandprotocol/chain/v2/x/feeds/types";

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

// Signal is the data structure that contains signal id and power of that signal.
message Signal {
  option (gogoproto.equal) = true;

  // ID is the id of the signal.
  string id = 1 [(gogoproto.customname) = "ID"];

  // Power is the power of the corresponding signal id.
  int64 power = 2;
}

// DelegatorSignals is the data structure that contains array of signals of a delegator.
message DelegatorSignals {
  option (gogoproto.equal) = true;

  // Delegator is the address of the delegator of this signals.
  string delegator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Signals is a list of signals submit by the delegator.
  repeated Signal signals = 2 [(gogoproto.nullable) = false];
}

// Feed is a structure that holds a signal id, its total power, and its calculated interval.
message Feed {
  option (gogoproto.equal) = true;

  // SignalID is the unique string that identifies the unit of feed.
  string signal_id = 1 [(gogoproto.customname) = "SignalID"];

  // Power is the power of the corresponding signal id.
  int64 power = 2;

  // Interval is the interval of the price feed.
  int64 interval = 3;
}

// FeedWithDeviation is a structure that holds a signal id, its total power, and its calculated interval and deviation.
message FeedWithDeviation {
  option (gogoproto.equal) = true;

  // SignalID is the unique string that identifies the unit of feed.
  string signal_id = 1 [(gogoproto.customname) = "SignalID"];

  // Power is the power of the corresponding signal id.
  int64 power = 2;

  // Interval is the interval of the price feed.
  int64 interval = 3;

  // DeviationBasisPoint is the maximum deviation value the feed can tolerate, expressed in basis points.
  int64 deviation_basis_point = 4;
}

// SupportedFeeds is a structure that holds a list of currently supported feeds, and its last update time and block.
message SupportedFeeds {
  option (gogoproto.equal) = true;

  // Feeds is a list of currently suppored feeds.
  repeated Feed feeds = 1 [(gogoproto.nullable) = false];

  // LastUpdateTimestamp is the timestamp of the last time supported feeds list is updated.
  int64 last_update_timestamp = 2;

  // LastUpdateBlock is the number of blocks of the last time supported feeds list is updated.
  int64 last_update_block = 3;
}

// SupportedFeedWithDeviations is a structure that holds a list of currently supported feed-with-deviations, and its
// last update time and block.
message SupportedFeedWithDeviations {
  option (gogoproto.equal) = true;

  // FeedWithDeviations is a list of currently suppored feed-with-deviations.
  repeated FeedWithDeviation feeds = 1 [(gogoproto.nullable) = false];

  // LastUpdateTimestamp is the timestamp of the last time supported feeds list is updated.
  int64 last_update_timestamp = 2;

  // LastUpdateBlock is the number of blocks of the last time supported feeds list is updated.
  int64 last_update_block = 3;
}

// PriceStatus is a structure that defines the price status of a price.
enum PriceStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // PRICE_STATUS_UNSPECIFIED is an unspecified price status.
  PRICE_STATUS_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "PriceStatusUnspecified"];

  // PRICE_STATUS_UNSUPPORTED is an unsupported price status.
  PRICE_STATUS_UNSUPPORTED = 1 [(gogoproto.enumvalue_customname) = "PriceStatusUnsupported"];

  // PRICE_STATUS_UNAVAILABLE is an unavailable price status.
  PRICE_STATUS_UNAVAILABLE = 2 [(gogoproto.enumvalue_customname) = "PriceStatusUnavailable"];

  // PRICE_STATUS_AVAILABLE is an available price status.
  PRICE_STATUS_AVAILABLE = 3 [(gogoproto.enumvalue_customname) = "PriceStatusAvailable"];
}

// Price is a structure that defines the price of a signal id.
message Price {
  option (gogoproto.equal) = true;

  // PriceStatus is the price status of a signal id.
  PriceStatus price_status = 1;

  // SignalID is the signal id of the price.
  string signal_id = 2 [(gogoproto.customname) = "SignalID"];

  // Price is the price of the signal id.
  uint64 price = 3;

  // Timestamp is the timestamp at which the price was aggregated.
  int64 timestamp = 4;
}

// SignalPrice is a structure that defines the signaled price of a signal id.
message SignalPrice {
  option (gogoproto.equal) = true;

  // PriceStatus is the price status of a signal id.
  PriceStatus price_status = 1;

  // SignalID is the signal id of the price.
  string signal_id = 2 [(gogoproto.customname) = "SignalID"];

  // Price is the price submitted by the validator.
  uint64 price = 3;
}

// ValidatorPrice is a structure that defines the price submitted by a validator for a signal id.
message ValidatorPrice {
  option (gogoproto.equal) = true;

  // PriceStatus is the price status of a price submitted.
  PriceStatus price_status = 1;

  // Validator is the validator address.
  string validator = 2;

  // SignalID is the signal id of the price.
  string signal_id = 3 [(gogoproto.customname) = "SignalID"];

  // Price is the price submitted by the validator.
  uint64 price = 4;

  // Timestamp is the timestamp at which the price was submitted.
  int64 timestamp = 5;

  // BlockHeight is the block height at which the price was submitted.
  int64 block_height = 6;
}

// ValidatorPriceList is a structure that holds a list of validator prices of
// a validator and its address.
message ValidatorPriceList {
  option (gogoproto.equal) = true;

  // Validator is the validator address.
  string validator = 1;

  // ValidatorsPrices is a list of validator prices.
  repeated ValidatorPrice validator_prices = 2 [(gogoproto.nullable) = false];
}

// ReferenceSourceConfig is a structure that defines the information of reference price source.
message ReferenceSourceConfig {
  option (gogoproto.equal) = true;

  // IPFSHash is the hash of the reference registry.
  string ipfs_hash = 1 [(gogoproto.customname) = "IPFSHash"];

  // Version is the version of the reference price source.
  string version = 2;
}
