syntax = "proto3";
package feeds.v1beta1;

option go_package = "github.com/bandprotocol/chain/v2/x/feeds/types";

import "gogoproto/gogo.proto";

// Signal contains symbol and power of that symbol
message Signal {
  option (gogoproto.equal) = true;

  string symbol = 1;
  uint64 power  = 2;
}

// Signal contains array of signal
message Signals {
  repeated Signal signals = 1 [(gogoproto.nullable) = false];
}

// Symbol defines a standard unit of exchange for a commodity.
message Symbol {
  option (gogoproto.equal) = true;

  // The unique symbol string that identifies the unit of exchange.
  string symbol = 1;

  uint64 power = 2;

  int64 interval = 3;

  int64 last_interval_update_timestamp = 4;
}

// Price defines the price of a symbol.
message Price {
  option (gogoproto.equal) = true;

  // The symbol of the price.
  string symbol = 1;

  // The price of the symbol.
  uint64 price = 2;

  // The timestamp at which the price was aggregated.
  int64 timestamp = 3;
}

// SubmitPrice defines the submit price of a symbol.
message SubmitPrice {
  option (gogoproto.equal) = true;

  // The symbol of the price.
  string symbol = 1;

  // The price of the symbol.
  uint64 price = 2;
}

// PriceValidator defines the price submitted by a validator for a symbol.
message PriceValidator {
  option (gogoproto.equal) = true;

  // The validator address.
  string validator = 1;

  // The symbol of the price.
  string symbol = 2;

  // The price submitted by the validator.
  uint64 price = 3;

  // The timestamp at which the price was submitted.
  int64 timestamp = 4;
}

// PriceService defines the information of price service.
message PriceService {
  option (gogoproto.equal) = true;

  // The hash of the price service.
  string hash = 1;

  // The version of the price service.
  string version = 2;

  // The URL of the price service.
  string url = 3;
}
