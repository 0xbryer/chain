syntax = "proto3";
package feeds.v1beta1;

option go_package = "github.com/bandprotocol/chain/v2/x/feeds/types";

import "gogoproto/gogo.proto";

// Signal contains signal id and power of that signal.
message Signal {
  option (gogoproto.equal) = true;

  // The id of the signal.
  string id = 1 [(gogoproto.customname) = "ID"];

  // The power of the corresponding signal id.
  uint64 power = 2;
}

// Signal contains array of signal
message Signals {
  // Signals is a list of signals submit by the delegator.
  repeated Signal signals = 1 [(gogoproto.nullable) = false];
}

// Feed defines a standard unit of exchange for a commodity.
message Feed {
  option (gogoproto.equal) = true;

  // The unique string that identifies the unit of feed.
  string signal_id = 1 [(gogoproto.customname) = "SignalID"];

  // The power of the signal id.
  uint64 power = 2;

  // The interval of the price feed of the signal id.
  int64 interval = 3;

  // The timestamp of the last time interval is updated.
  int64 last_interval_update_timestamp = 4;
}

// PriceOption defines the price option of a price.
enum PriceOption {
  option (gogoproto.goproto_enum_prefix) = false;

  // PRICE_OPTION_UNSPECIFIED defines an unspecified price option.
  PRICE_OPTION_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "PriceOptionUnspecified"];

  // PRICE_OPTION_UNSUPPORTED defines an unsupported price option.
  PRICE_OPTION_UNSUPPORTED = 1 [(gogoproto.enumvalue_customname) = "PriceOptionUnsupported"];

  // PRICE_OPTION_UNAVAILABLE defines an unavailable price option.
  PRICE_OPTION_UNAVAILABLE = 2 [(gogoproto.enumvalue_customname) = "PriceOptionUnavailable"];

  // PRICE_OPTION_AVAILABLE defines an available price option.
  PRICE_OPTION_AVAILABLE = 3 [(gogoproto.enumvalue_customname) = "PriceOptionAvailable"];
}

// Price defines the price of a signal id.
message Price {
  option (gogoproto.equal) = true;

  // PriceOption defines the price option of a signal id.
  PriceOption price_option = 1;

  // The signal id of the price.
  string signal_id = 2 [(gogoproto.customname) = "SignalID"];

  // The price of the signal id.
  uint64 price = 3;

  // The timestamp at which the price was aggregated.
  int64 timestamp = 4;
}

// SubmitPrice defines the submit price of a signal id.
message SubmitPrice {
  option (gogoproto.equal) = true;

  // PriceOption defines the price option of a signal id.
  PriceOption price_option = 1;

  // The signal id of the price.
  string signal_id = 2 [(gogoproto.customname) = "SignalID"];

  // The price submitted by the validator.
  uint64 price = 3;
}

// PriceValidator defines the price submitted by a validator for a signal id.
message PriceValidator {
  option (gogoproto.equal) = true;

  // PriceOption defines the price option of a price submitted.
  PriceOption price_option = 1;

  // The validator address.
  string validator = 2;

  // The signal id of the price.
  string signal_id = 3 [(gogoproto.customname) = "SignalID"];

  // The price submitted by the validator.
  uint64 price = 4;

  // The timestamp at which the price was submitted.
  int64 timestamp = 5;
}

// PriceService defines the information of price service.
message PriceService {
  option (gogoproto.equal) = true;

  // The hash of the price service.
  string hash = 1;

  // The version of the price service.
  string version = 2;

  // The URL of the price service.
  string url = 3;
}
