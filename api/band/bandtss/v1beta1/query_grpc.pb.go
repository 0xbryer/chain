// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: band/bandtss/v1beta1/query.proto

package bandtssv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Counts_FullMethodName          = "/band.bandtss.v1beta1.Query/Counts"
	Query_Members_FullMethodName         = "/band.bandtss.v1beta1.Query/Members"
	Query_Member_FullMethodName          = "/band.bandtss.v1beta1.Query/Member"
	Query_CurrentGroup_FullMethodName    = "/band.bandtss.v1beta1.Query/CurrentGroup"
	Query_IncomingGroup_FullMethodName   = "/band.bandtss.v1beta1.Query/IncomingGroup"
	Query_Signing_FullMethodName         = "/band.bandtss.v1beta1.Query/Signing"
	Query_GroupTransition_FullMethodName = "/band.bandtss.v1beta1.Query/GroupTransition"
	Query_Params_FullMethodName          = "/band.bandtss.v1beta1.Query/Params"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Counts queries the number of existing signing.
	Counts(ctx context.Context, in *QueryCountsRequest, opts ...grpc.CallOption) (*QueryCountsResponse, error)
	// Members queries all members.
	Members(ctx context.Context, in *QueryMembersRequest, opts ...grpc.CallOption) (*QueryMembersResponse, error)
	// Member queries the member information of the given address.
	Member(ctx context.Context, in *QueryMemberRequest, opts ...grpc.CallOption) (*QueryMemberResponse, error)
	// CurrentGroup queries the current group information.
	CurrentGroup(ctx context.Context, in *QueryCurrentGroupRequest, opts ...grpc.CallOption) (*QueryCurrentGroupResponse, error)
	// IncomingGroup queries the incoming group information.
	IncomingGroup(ctx context.Context, in *QueryIncomingGroupRequest, opts ...grpc.CallOption) (*QueryIncomingGroupResponse, error)
	// Signing queries the signing result of the given signing request ID.
	Signing(ctx context.Context, in *QuerySigningRequest, opts ...grpc.CallOption) (*QuerySigningResponse, error)
	// GroupTransition queries the group transition information.
	GroupTransition(ctx context.Context, in *QueryGroupTransitionRequest, opts ...grpc.CallOption) (*QueryGroupTransitionResponse, error)
	// Params queries parameters of bandtss module
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Counts(ctx context.Context, in *QueryCountsRequest, opts ...grpc.CallOption) (*QueryCountsResponse, error) {
	out := new(QueryCountsResponse)
	err := c.cc.Invoke(ctx, Query_Counts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Members(ctx context.Context, in *QueryMembersRequest, opts ...grpc.CallOption) (*QueryMembersResponse, error) {
	out := new(QueryMembersResponse)
	err := c.cc.Invoke(ctx, Query_Members_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Member(ctx context.Context, in *QueryMemberRequest, opts ...grpc.CallOption) (*QueryMemberResponse, error) {
	out := new(QueryMemberResponse)
	err := c.cc.Invoke(ctx, Query_Member_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentGroup(ctx context.Context, in *QueryCurrentGroupRequest, opts ...grpc.CallOption) (*QueryCurrentGroupResponse, error) {
	out := new(QueryCurrentGroupResponse)
	err := c.cc.Invoke(ctx, Query_CurrentGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IncomingGroup(ctx context.Context, in *QueryIncomingGroupRequest, opts ...grpc.CallOption) (*QueryIncomingGroupResponse, error) {
	out := new(QueryIncomingGroupResponse)
	err := c.cc.Invoke(ctx, Query_IncomingGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Signing(ctx context.Context, in *QuerySigningRequest, opts ...grpc.CallOption) (*QuerySigningResponse, error) {
	out := new(QuerySigningResponse)
	err := c.cc.Invoke(ctx, Query_Signing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GroupTransition(ctx context.Context, in *QueryGroupTransitionRequest, opts ...grpc.CallOption) (*QueryGroupTransitionResponse, error) {
	out := new(QueryGroupTransitionResponse)
	err := c.cc.Invoke(ctx, Query_GroupTransition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Counts queries the number of existing signing.
	Counts(context.Context, *QueryCountsRequest) (*QueryCountsResponse, error)
	// Members queries all members.
	Members(context.Context, *QueryMembersRequest) (*QueryMembersResponse, error)
	// Member queries the member information of the given address.
	Member(context.Context, *QueryMemberRequest) (*QueryMemberResponse, error)
	// CurrentGroup queries the current group information.
	CurrentGroup(context.Context, *QueryCurrentGroupRequest) (*QueryCurrentGroupResponse, error)
	// IncomingGroup queries the incoming group information.
	IncomingGroup(context.Context, *QueryIncomingGroupRequest) (*QueryIncomingGroupResponse, error)
	// Signing queries the signing result of the given signing request ID.
	Signing(context.Context, *QuerySigningRequest) (*QuerySigningResponse, error)
	// GroupTransition queries the group transition information.
	GroupTransition(context.Context, *QueryGroupTransitionRequest) (*QueryGroupTransitionResponse, error)
	// Params queries parameters of bandtss module
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Counts(context.Context, *QueryCountsRequest) (*QueryCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Counts not implemented")
}
func (UnimplementedQueryServer) Members(context.Context, *QueryMembersRequest) (*QueryMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Members not implemented")
}
func (UnimplementedQueryServer) Member(context.Context, *QueryMemberRequest) (*QueryMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Member not implemented")
}
func (UnimplementedQueryServer) CurrentGroup(context.Context, *QueryCurrentGroupRequest) (*QueryCurrentGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentGroup not implemented")
}
func (UnimplementedQueryServer) IncomingGroup(context.Context, *QueryIncomingGroupRequest) (*QueryIncomingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncomingGroup not implemented")
}
func (UnimplementedQueryServer) Signing(context.Context, *QuerySigningRequest) (*QuerySigningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signing not implemented")
}
func (UnimplementedQueryServer) GroupTransition(context.Context, *QueryGroupTransitionRequest) (*QueryGroupTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupTransition not implemented")
}
func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Counts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Counts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Counts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Counts(ctx, req.(*QueryCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Members_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Members(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Members_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Members(ctx, req.(*QueryMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Member_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Member(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Member_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Member(ctx, req.(*QueryMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CurrentGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentGroup(ctx, req.(*QueryCurrentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IncomingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncomingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncomingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IncomingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncomingGroup(ctx, req.(*QueryIncomingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Signing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Signing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Signing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Signing(ctx, req.(*QuerySigningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GroupTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GroupTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GroupTransition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GroupTransition(ctx, req.(*QueryGroupTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "band.bandtss.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Counts",
			Handler:    _Query_Counts_Handler,
		},
		{
			MethodName: "Members",
			Handler:    _Query_Members_Handler,
		},
		{
			MethodName: "Member",
			Handler:    _Query_Member_Handler,
		},
		{
			MethodName: "CurrentGroup",
			Handler:    _Query_CurrentGroup_Handler,
		},
		{
			MethodName: "IncomingGroup",
			Handler:    _Query_IncomingGroup_Handler,
		},
		{
			MethodName: "Signing",
			Handler:    _Query_Signing_Handler,
		},
		{
			MethodName: "GroupTransition",
			Handler:    _Query_GroupTransition_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "band/bandtss/v1beta1/query.proto",
}
