// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: band/base/oracle/v1/proof.proto

package oraclev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_Proof_FullMethodName             = "/band.base.oracle.v1.Service/Proof"
	Service_MultiProof_FullMethodName        = "/band.base.oracle.v1.Service/MultiProof"
	Service_RequestCountProof_FullMethodName = "/band.base.oracle.v1.Service/RequestCountProof"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// Proof queries the proof for given request ID
	Proof(ctx context.Context, in *ProofRequest, opts ...grpc.CallOption) (*ProofResponse, error)
	// MultiProof queries multiple proofs for given list of request IDs
	MultiProof(ctx context.Context, in *MultiProofRequest, opts ...grpc.CallOption) (*MultiProofResponse, error)
	// RequestCountProof queries the count proof
	RequestCountProof(ctx context.Context, in *RequestCountProofRequest, opts ...grpc.CallOption) (*RequestCountProofResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Proof(ctx context.Context, in *ProofRequest, opts ...grpc.CallOption) (*ProofResponse, error) {
	out := new(ProofResponse)
	err := c.cc.Invoke(ctx, Service_Proof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) MultiProof(ctx context.Context, in *MultiProofRequest, opts ...grpc.CallOption) (*MultiProofResponse, error) {
	out := new(MultiProofResponse)
	err := c.cc.Invoke(ctx, Service_MultiProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RequestCountProof(ctx context.Context, in *RequestCountProofRequest, opts ...grpc.CallOption) (*RequestCountProofResponse, error) {
	out := new(RequestCountProofResponse)
	err := c.cc.Invoke(ctx, Service_RequestCountProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// Proof queries the proof for given request ID
	Proof(context.Context, *ProofRequest) (*ProofResponse, error)
	// MultiProof queries multiple proofs for given list of request IDs
	MultiProof(context.Context, *MultiProofRequest) (*MultiProofResponse, error)
	// RequestCountProof queries the count proof
	RequestCountProof(context.Context, *RequestCountProofRequest) (*RequestCountProofResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Proof(context.Context, *ProofRequest) (*ProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proof not implemented")
}
func (UnimplementedServiceServer) MultiProof(context.Context, *MultiProofRequest) (*MultiProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiProof not implemented")
}
func (UnimplementedServiceServer) RequestCountProof(context.Context, *RequestCountProofRequest) (*RequestCountProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCountProof not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Proof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Proof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Proof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Proof(ctx, req.(*ProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_MultiProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).MultiProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_MultiProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).MultiProof(ctx, req.(*MultiProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RequestCountProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCountProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RequestCountProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_RequestCountProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RequestCountProof(ctx, req.(*RequestCountProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "band.base.oracle.v1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Proof",
			Handler:    _Service_Proof_Handler,
		},
		{
			MethodName: "MultiProof",
			Handler:    _Service_MultiProof_Handler,
		},
		{
			MethodName: "RequestCountProof",
			Handler:    _Service_RequestCountProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "band/base/oracle/v1/proof.proto",
}
