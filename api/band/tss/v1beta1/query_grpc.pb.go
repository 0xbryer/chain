// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: band/tss/v1beta1/query.proto

package tssv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Counts_FullMethodName          = "/band.tss.v1beta1.Query/Counts"
	Query_Groups_FullMethodName          = "/band.tss.v1beta1.Query/Groups"
	Query_Group_FullMethodName           = "/band.tss.v1beta1.Query/Group"
	Query_Members_FullMethodName         = "/band.tss.v1beta1.Query/Members"
	Query_IsGrantee_FullMethodName       = "/band.tss.v1beta1.Query/IsGrantee"
	Query_DE_FullMethodName              = "/band.tss.v1beta1.Query/DE"
	Query_PendingGroups_FullMethodName   = "/band.tss.v1beta1.Query/PendingGroups"
	Query_PendingSignings_FullMethodName = "/band.tss.v1beta1.Query/PendingSignings"
	Query_Signing_FullMethodName         = "/band.tss.v1beta1.Query/Signing"
	Query_Signings_FullMethodName        = "/band.tss.v1beta1.Query/Signings"
	Query_Params_FullMethodName          = "/band.tss.v1beta1.Query/Params"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Counts queries the number of existing groups and signing.
	Counts(ctx context.Context, in *QueryCountsRequest, opts ...grpc.CallOption) (*QueryCountsResponse, error)
	// Groups queries groups details.
	Groups(ctx context.Context, in *QueryGroupsRequest, opts ...grpc.CallOption) (*QueryGroupsResponse, error)
	// Group queries group details from the given id.
	Group(ctx context.Context, in *QueryGroupRequest, opts ...grpc.CallOption) (*QueryGroupResponse, error)
	// Members queries all members in this group.
	Members(ctx context.Context, in *QueryMembersRequest, opts ...grpc.CallOption) (*QueryMembersResponse, error)
	// IsGrantee queries whether granter grants the grantee.
	IsGrantee(ctx context.Context, in *QueryIsGranteeRequest, opts ...grpc.CallOption) (*QueryIsGranteeResponse, error)
	// DE queries all de for this address.
	DE(ctx context.Context, in *QueryDERequest, opts ...grpc.CallOption) (*QueryDEResponse, error)
	// PendingGroups queries all pending groups that waits the given address to submit a message.
	PendingGroups(ctx context.Context, in *QueryPendingGroupsRequest, opts ...grpc.CallOption) (*QueryPendingGroupsResponse, error)
	// PendingSignings queries all pending requests that waits the given address to sign a message.
	PendingSignings(ctx context.Context, in *QueryPendingSigningsRequest, opts ...grpc.CallOption) (*QueryPendingSigningsResponse, error)
	// Signing queries signing details from the given id.
	Signing(ctx context.Context, in *QuerySigningRequest, opts ...grpc.CallOption) (*QuerySigningResponse, error)
	// Signings queries signings details.
	Signings(ctx context.Context, in *QuerySigningsRequest, opts ...grpc.CallOption) (*QuerySigningsResponse, error)
	// Params returns all parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Counts(ctx context.Context, in *QueryCountsRequest, opts ...grpc.CallOption) (*QueryCountsResponse, error) {
	out := new(QueryCountsResponse)
	err := c.cc.Invoke(ctx, Query_Counts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Groups(ctx context.Context, in *QueryGroupsRequest, opts ...grpc.CallOption) (*QueryGroupsResponse, error) {
	out := new(QueryGroupsResponse)
	err := c.cc.Invoke(ctx, Query_Groups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Group(ctx context.Context, in *QueryGroupRequest, opts ...grpc.CallOption) (*QueryGroupResponse, error) {
	out := new(QueryGroupResponse)
	err := c.cc.Invoke(ctx, Query_Group_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Members(ctx context.Context, in *QueryMembersRequest, opts ...grpc.CallOption) (*QueryMembersResponse, error) {
	out := new(QueryMembersResponse)
	err := c.cc.Invoke(ctx, Query_Members_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsGrantee(ctx context.Context, in *QueryIsGranteeRequest, opts ...grpc.CallOption) (*QueryIsGranteeResponse, error) {
	out := new(QueryIsGranteeResponse)
	err := c.cc.Invoke(ctx, Query_IsGrantee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DE(ctx context.Context, in *QueryDERequest, opts ...grpc.CallOption) (*QueryDEResponse, error) {
	out := new(QueryDEResponse)
	err := c.cc.Invoke(ctx, Query_DE_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingGroups(ctx context.Context, in *QueryPendingGroupsRequest, opts ...grpc.CallOption) (*QueryPendingGroupsResponse, error) {
	out := new(QueryPendingGroupsResponse)
	err := c.cc.Invoke(ctx, Query_PendingGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingSignings(ctx context.Context, in *QueryPendingSigningsRequest, opts ...grpc.CallOption) (*QueryPendingSigningsResponse, error) {
	out := new(QueryPendingSigningsResponse)
	err := c.cc.Invoke(ctx, Query_PendingSignings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Signing(ctx context.Context, in *QuerySigningRequest, opts ...grpc.CallOption) (*QuerySigningResponse, error) {
	out := new(QuerySigningResponse)
	err := c.cc.Invoke(ctx, Query_Signing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Signings(ctx context.Context, in *QuerySigningsRequest, opts ...grpc.CallOption) (*QuerySigningsResponse, error) {
	out := new(QuerySigningsResponse)
	err := c.cc.Invoke(ctx, Query_Signings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Counts queries the number of existing groups and signing.
	Counts(context.Context, *QueryCountsRequest) (*QueryCountsResponse, error)
	// Groups queries groups details.
	Groups(context.Context, *QueryGroupsRequest) (*QueryGroupsResponse, error)
	// Group queries group details from the given id.
	Group(context.Context, *QueryGroupRequest) (*QueryGroupResponse, error)
	// Members queries all members in this group.
	Members(context.Context, *QueryMembersRequest) (*QueryMembersResponse, error)
	// IsGrantee queries whether granter grants the grantee.
	IsGrantee(context.Context, *QueryIsGranteeRequest) (*QueryIsGranteeResponse, error)
	// DE queries all de for this address.
	DE(context.Context, *QueryDERequest) (*QueryDEResponse, error)
	// PendingGroups queries all pending groups that waits the given address to submit a message.
	PendingGroups(context.Context, *QueryPendingGroupsRequest) (*QueryPendingGroupsResponse, error)
	// PendingSignings queries all pending requests that waits the given address to sign a message.
	PendingSignings(context.Context, *QueryPendingSigningsRequest) (*QueryPendingSigningsResponse, error)
	// Signing queries signing details from the given id.
	Signing(context.Context, *QuerySigningRequest) (*QuerySigningResponse, error)
	// Signings queries signings details.
	Signings(context.Context, *QuerySigningsRequest) (*QuerySigningsResponse, error)
	// Params returns all parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Counts(context.Context, *QueryCountsRequest) (*QueryCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Counts not implemented")
}
func (UnimplementedQueryServer) Groups(context.Context, *QueryGroupsRequest) (*QueryGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Groups not implemented")
}
func (UnimplementedQueryServer) Group(context.Context, *QueryGroupRequest) (*QueryGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Group not implemented")
}
func (UnimplementedQueryServer) Members(context.Context, *QueryMembersRequest) (*QueryMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Members not implemented")
}
func (UnimplementedQueryServer) IsGrantee(context.Context, *QueryIsGranteeRequest) (*QueryIsGranteeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGrantee not implemented")
}
func (UnimplementedQueryServer) DE(context.Context, *QueryDERequest) (*QueryDEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DE not implemented")
}
func (UnimplementedQueryServer) PendingGroups(context.Context, *QueryPendingGroupsRequest) (*QueryPendingGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingGroups not implemented")
}
func (UnimplementedQueryServer) PendingSignings(context.Context, *QueryPendingSigningsRequest) (*QueryPendingSigningsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingSignings not implemented")
}
func (UnimplementedQueryServer) Signing(context.Context, *QuerySigningRequest) (*QuerySigningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signing not implemented")
}
func (UnimplementedQueryServer) Signings(context.Context, *QuerySigningsRequest) (*QuerySigningsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signings not implemented")
}
func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Counts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Counts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Counts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Counts(ctx, req.(*QueryCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Groups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Groups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Groups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Groups(ctx, req.(*QueryGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Group_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Group(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Group_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Group(ctx, req.(*QueryGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Members_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Members(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Members_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Members(ctx, req.(*QueryMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsGrantee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsGranteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsGrantee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IsGrantee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsGrantee(ctx, req.(*QueryIsGranteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DE(ctx, req.(*QueryDERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PendingGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingGroups(ctx, req.(*QueryPendingGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingSignings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingSigningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingSignings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PendingSignings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingSignings(ctx, req.(*QueryPendingSigningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Signing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Signing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Signing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Signing(ctx, req.(*QuerySigningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Signings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Signings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Signings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Signings(ctx, req.(*QuerySigningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "band.tss.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Counts",
			Handler:    _Query_Counts_Handler,
		},
		{
			MethodName: "Groups",
			Handler:    _Query_Groups_Handler,
		},
		{
			MethodName: "Group",
			Handler:    _Query_Group_Handler,
		},
		{
			MethodName: "Members",
			Handler:    _Query_Members_Handler,
		},
		{
			MethodName: "IsGrantee",
			Handler:    _Query_IsGrantee_Handler,
		},
		{
			MethodName: "DE",
			Handler:    _Query_DE_Handler,
		},
		{
			MethodName: "PendingGroups",
			Handler:    _Query_PendingGroups_Handler,
		},
		{
			MethodName: "PendingSignings",
			Handler:    _Query_PendingSignings_Handler,
		},
		{
			MethodName: "Signing",
			Handler:    _Query_Signing_Handler,
		},
		{
			MethodName: "Signings",
			Handler:    _Query_Signings_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "band/tss/v1beta1/query.proto",
}
